
SPI_communicateMCUs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000538  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000538  000005ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000100  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d0f  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000475  00000000  00000000  000013f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003d3  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000198  00000000  00000000  00001c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000478  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000922  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c8  00000000  00000000  00002b72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 02 	call	0x482	; 0x482 <main>
  7a:	0c 94 9a 02 	jmp	0x534	; 0x534 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Delay_ms_independent>:
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	a8 ee       	ldi	r26, 0xE8	; 232
  88:	b3 e0       	ldi	r27, 0x03	; 3
  8a:	0e 94 8b 02 	call	0x516	; 0x516 <__umulhisi3>
  8e:	23 e0       	ldi	r18, 0x03	; 3
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__udivmodsi4>
  9a:	21 15       	cp	r18, r1
  9c:	31 05       	cpc	r19, r1
  9e:	41 05       	cpc	r20, r1
  a0:	51 05       	cpc	r21, r1
  a2:	49 f0       	breq	.+18     	; 0xb6 <Delay_ms_independent+0x34>
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	31 09       	sbc	r19, r1
  a8:	41 09       	sbc	r20, r1
  aa:	51 09       	sbc	r21, r1
  ac:	21 15       	cp	r18, r1
  ae:	31 05       	cpc	r19, r1
  b0:	41 05       	cpc	r20, r1
  b2:	51 05       	cpc	r21, r1
  b4:	b9 f7       	brne	.-18     	; 0xa4 <Delay_ms_independent+0x22>
  b6:	08 95       	ret

000000b8 <DIO_setPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"

sint8_t DIO_setPinDirection(uint8_t GPIO, uint8_t pin_number, uint8_t direction)
{
	switch (GPIO)
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	c9 f0       	breq	.+50     	; 0xee <DIO_setPinDirection+0x36>
  bc:	28 f0       	brcs	.+10     	; 0xc8 <DIO_setPinDirection+0x10>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	39 f1       	breq	.+78     	; 0x110 <DIO_setPinDirection+0x58>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	b1 f1       	breq	.+108    	; 0x132 <DIO_setPinDirection+0x7a>
  c6:	46 c0       	rjmp	.+140    	; 0x154 <DIO_setPinDirection+0x9c>
	{
		case GPIOA:
			if (pin_number <= 7) 
  c8:	68 30       	cpi	r22, 0x08	; 8
  ca:	08 f0       	brcs	.+2      	; 0xce <DIO_setPinDirection+0x16>
  cc:	45 c0       	rjmp	.+138    	; 0x158 <DIO_setPinDirection+0xa0>
			{
				if (direction <= 1)
  ce:	42 30       	cpi	r20, 0x02	; 2
  d0:	08 f0       	brcs	.+2      	; 0xd4 <DIO_setPinDirection+0x1c>
  d2:	44 c0       	rjmp	.+136    	; 0x15c <DIO_setPinDirection+0xa4>
				{
					PORTA_DDR |= (direction<< pin_number);
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	9a 01       	movw	r18, r20
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_setPinDirection+0x28>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_setPinDirection+0x24>
  e4:	b9 01       	movw	r22, r18
  e6:	68 2b       	or	r22, r24
  e8:	6a bb       	out	0x1a, r22	; 26
					return NO_ERRORS; // no errors
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
		return PIN_NUMBER_OUT_OF_RANGE; 
		
		case GPIOB:
			if (pin_number <= 7)
  ee:	68 30       	cpi	r22, 0x08	; 8
  f0:	b8 f5       	brcc	.+110    	; 0x160 <DIO_setPinDirection+0xa8>
			{
				if (direction <= 1)
  f2:	42 30       	cpi	r20, 0x02	; 2
  f4:	b8 f5       	brcc	.+110    	; 0x164 <DIO_setPinDirection+0xac>
				{
					PORTB_DDR |= (direction<< pin_number);
  f6:	87 b3       	in	r24, 0x17	; 23
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	9a 01       	movw	r18, r20
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_setPinDirection+0x4a>
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_setPinDirection+0x46>
 106:	b9 01       	movw	r22, r18
 108:	68 2b       	or	r22, r24
 10a:	67 bb       	out	0x17, r22	; 23
					return NO_ERRORS; // no errors
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
		
		case GPIOC:
			if (pin_number <= 7)
 110:	68 30       	cpi	r22, 0x08	; 8
 112:	50 f5       	brcc	.+84     	; 0x168 <DIO_setPinDirection+0xb0>
			{
				if (direction <= 1)
 114:	42 30       	cpi	r20, 0x02	; 2
 116:	50 f5       	brcc	.+84     	; 0x16c <DIO_setPinDirection+0xb4>
				{
					PORTC_DDR |= (direction<< pin_number);
 118:	84 b3       	in	r24, 0x14	; 20
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	9a 01       	movw	r18, r20
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_setPinDirection+0x6c>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_setPinDirection+0x68>
 128:	b9 01       	movw	r22, r18
 12a:	68 2b       	or	r22, r24
 12c:	64 bb       	out	0x14, r22	; 20
					return NO_ERRORS; // no errors
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
		
		case GPIOD:
		if (pin_number <= 7)
 132:	68 30       	cpi	r22, 0x08	; 8
 134:	e8 f4       	brcc	.+58     	; 0x170 <DIO_setPinDirection+0xb8>
		{
			if (direction <= 1)
 136:	42 30       	cpi	r20, 0x02	; 2
 138:	e8 f4       	brcc	.+58     	; 0x174 <DIO_setPinDirection+0xbc>
			{
				PORTD_DDR |= (direction<< pin_number);
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	9a 01       	movw	r18, r20
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_setPinDirection+0x8e>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_setPinDirection+0x8a>
 14a:	b9 01       	movw	r22, r18
 14c:	68 2b       	or	r22, r24
 14e:	61 bb       	out	0x11, r22	; 17
				return NO_ERRORS; // no errors
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	08 95       	ret
			return INVALID_PIN_DIRECTION;
		}
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
			

	default: return INVALID_PORT_ID; // GPIO Id isn't defined
 154:	8d ef       	ldi	r24, 0xFD	; 253
 156:	08 95       	ret
					PORTA_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
		return PIN_NUMBER_OUT_OF_RANGE; 
 158:	8e ef       	ldi	r24, 0xFE	; 254
 15a:	08 95       	ret
				if (direction <= 1)
				{
					PORTA_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	08 95       	ret
					PORTB_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
 160:	8e ef       	ldi	r24, 0xFE	; 254
 162:	08 95       	ret
				if (direction <= 1)
				{
					PORTB_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	08 95       	ret
					PORTC_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
 168:	8e ef       	ldi	r24, 0xFE	; 254
 16a:	08 95       	ret
				if (direction <= 1)
				{
					PORTC_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	08 95       	ret
				PORTD_DDR |= (direction<< pin_number);
				return NO_ERRORS; // no errors
			}
			return INVALID_PIN_DIRECTION;
		}
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
 170:	8e ef       	ldi	r24, 0xFE	; 254
 172:	08 95       	ret
			if (direction <= 1)
			{
				PORTD_DDR |= (direction<< pin_number);
				return NO_ERRORS; // no errors
			}
			return INVALID_PIN_DIRECTION;
 174:	8f ef       	ldi	r24, 0xFF	; 255
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
			

	default: return INVALID_PORT_ID; // GPIO Id isn't defined
	}
}
 176:	08 95       	ret

00000178 <DIO_setPinValue>:



sint8_t DIO_setPinValue(uint8_t GPIO, uint8_t pin_number, uint8_t value)
{
	switch (GPIO)
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	41 f1       	breq	.+80     	; 0x1cc <DIO_setPinValue+0x54>
 17c:	38 f0       	brcs	.+14     	; 0x18c <DIO_setPinValue+0x14>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	09 f4       	brne	.+2      	; 0x184 <DIO_setPinValue+0xc>
 182:	44 c0       	rjmp	.+136    	; 0x20c <DIO_setPinValue+0x94>
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	09 f4       	brne	.+2      	; 0x18a <DIO_setPinValue+0x12>
 188:	61 c0       	rjmp	.+194    	; 0x24c <DIO_setPinValue+0xd4>
 18a:	7f c0       	rjmp	.+254    	; 0x28a <DIO_setPinValue+0x112>
	{
		case GPIOA:
		if (pin_number <= 7)
 18c:	68 30       	cpi	r22, 0x08	; 8
 18e:	08 f0       	brcs	.+2      	; 0x192 <DIO_setPinValue+0x1a>
 190:	7e c0       	rjmp	.+252    	; 0x28e <DIO_setPinValue+0x116>
		{
			if (GET_BIT(value, 0) == LOW)
 192:	40 fd       	sbrc	r20, 0
 194:	0e c0       	rjmp	.+28     	; 0x1b2 <DIO_setPinValue+0x3a>
			{
				CLR_BIT(PORTA_DATA, pin_number);
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	ac 01       	movw	r20, r24
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_setPinValue+0x2c>
 1a0:	44 0f       	add	r20, r20
 1a2:	55 1f       	adc	r21, r21
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_setPinValue+0x28>
 1a8:	ba 01       	movw	r22, r20
 1aa:	60 95       	com	r22
 1ac:	62 23       	and	r22, r18
 1ae:	6b bb       	out	0x1b, r22	; 27
 1b0:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTA_DATA, pin_number);
 1b2:	2b b3       	in	r18, 0x1b	; 27
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_setPinValue+0x48>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_setPinValue+0x44>
 1c4:	ba 01       	movw	r22, r20
 1c6:	62 2b       	or	r22, r18
 1c8:	6b bb       	out	0x1b, r22	; 27
 1ca:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error


		case GPIOB:
		if (pin_number <= 7)
 1cc:	68 30       	cpi	r22, 0x08	; 8
 1ce:	08 f0       	brcs	.+2      	; 0x1d2 <DIO_setPinValue+0x5a>
 1d0:	60 c0       	rjmp	.+192    	; 0x292 <DIO_setPinValue+0x11a>
		{
			if (GET_BIT(value, 0) == LOW)
 1d2:	40 fd       	sbrc	r20, 0
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <DIO_setPinValue+0x7a>
			{
				CLR_BIT(PORTB_DATA, pin_number);
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	ac 01       	movw	r20, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setPinValue+0x6c>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setPinValue+0x68>
 1e8:	ba 01       	movw	r22, r20
 1ea:	60 95       	com	r22
 1ec:	62 23       	and	r22, r18
 1ee:	68 bb       	out	0x18, r22	; 24
 1f0:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTB_DATA, pin_number);
 1f2:	28 b3       	in	r18, 0x18	; 24
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_setPinValue+0x88>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_setPinValue+0x84>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	68 bb       	out	0x18, r22	; 24
 20a:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error

		
		case GPIOC:
		if (pin_number <= 7)
 20c:	68 30       	cpi	r22, 0x08	; 8
 20e:	08 f0       	brcs	.+2      	; 0x212 <DIO_setPinValue+0x9a>
 210:	42 c0       	rjmp	.+132    	; 0x296 <DIO_setPinValue+0x11e>
		{
			if (GET_BIT(value, 0) == LOW)
 212:	40 fd       	sbrc	r20, 0
 214:	0e c0       	rjmp	.+28     	; 0x232 <DIO_setPinValue+0xba>
			{
				CLR_BIT(PORTC_DATA, pin_number);
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	ac 01       	movw	r20, r24
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_setPinValue+0xac>
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_setPinValue+0xa8>
 228:	ba 01       	movw	r22, r20
 22a:	60 95       	com	r22
 22c:	62 23       	and	r22, r18
 22e:	65 bb       	out	0x15, r22	; 21
 230:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTC_DATA, pin_number);
 232:	25 b3       	in	r18, 0x15	; 21
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ac 01       	movw	r20, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_setPinValue+0xc8>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_setPinValue+0xc4>
 244:	ba 01       	movw	r22, r20
 246:	62 2b       	or	r22, r18
 248:	65 bb       	out	0x15, r22	; 21
 24a:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error

		
		case GPIOD:
		if (pin_number <= 7)
 24c:	68 30       	cpi	r22, 0x08	; 8
 24e:	28 f5       	brcc	.+74     	; 0x29a <DIO_setPinValue+0x122>
		{
			if (GET_BIT(value, 0) == LOW)
 250:	40 fd       	sbrc	r20, 0
 252:	0e c0       	rjmp	.+28     	; 0x270 <DIO_setPinValue+0xf8>
			{
				CLR_BIT(PORTD_DATA, pin_number);
 254:	22 b3       	in	r18, 0x12	; 18
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_setPinValue+0xea>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_setPinValue+0xe6>
 266:	ba 01       	movw	r22, r20
 268:	60 95       	com	r22
 26a:	62 23       	and	r22, r18
 26c:	62 bb       	out	0x12, r22	; 18
 26e:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTD_DATA, pin_number);
 270:	22 b3       	in	r18, 0x12	; 18
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_setPinValue+0x106>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_setPinValue+0x102>
 282:	ba 01       	movw	r22, r20
 284:	62 2b       	or	r22, r18
 286:	62 bb       	out	0x12, r22	; 18
 288:	08 95       	ret
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error


		default: return INVALID_PORT_ID; // GPIO Id isn't defined
 28a:	8d ef       	ldi	r24, 0xFD	; 253
 28c:	08 95       	ret
			{
				SET_BIT(PORTA_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 28e:	8e ef       	ldi	r24, 0xFE	; 254
 290:	08 95       	ret
			{
				SET_BIT(PORTB_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 292:	8e ef       	ldi	r24, 0xFE	; 254
 294:	08 95       	ret
			{
				SET_BIT(PORTC_DATA, pin_number);
			}
			return NO_ERRORS; 
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 296:	8e ef       	ldi	r24, 0xFE	; 254
 298:	08 95       	ret
			{
				SET_BIT(PORTD_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 29a:	8e ef       	ldi	r24, 0xFE	; 254


		default: return INVALID_PORT_ID; // GPIO Id isn't defined
	}
}
 29c:	08 95       	ret

0000029e <DIO_SetPortValue>:
	}
	return value ;
}

void DIO_SetPortValue (uint8_t PortNumber , uint8_t Value) {
	switch(PortNumber) {
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	41 f0       	breq	.+16     	; 0x2b2 <DIO_SetPortValue+0x14>
 2a2:	28 f0       	brcs	.+10     	; 0x2ae <DIO_SetPortValue+0x10>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	39 f0       	breq	.+14     	; 0x2b6 <DIO_SetPortValue+0x18>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	39 f0       	breq	.+14     	; 0x2ba <DIO_SetPortValue+0x1c>
 2ac:	08 95       	ret
		case GPIOA :
		PORTA_DATA = Value ;
 2ae:	6b bb       	out	0x1b, r22	; 27
		break;
 2b0:	08 95       	ret
		
		case GPIOB :
		PORTB_DATA = Value ;
 2b2:	68 bb       	out	0x18, r22	; 24
		break;
 2b4:	08 95       	ret
		
		case GPIOC :
		PORTC_DATA = Value ;
 2b6:	65 bb       	out	0x15, r22	; 21
		break;
 2b8:	08 95       	ret
		
		case GPIOD :
		PORTD_DATA = Value ;
 2ba:	62 bb       	out	0x12, r22	; 18
 2bc:	08 95       	ret

000002be <LCD_StartOperation>:
}

static void LCD_StartOperation(void)
{
	// clear E pin
	DIO_setPinValue(E,0);	
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_setPinValue>
 2c8:	08 95       	ret

000002ca <LCD_SendCommand>:
	//LCD_sendCommand(CLEAR_SCREEN);
	//_delay_ms(2);
//}

void LCD_SendCommand(uint8_t command)
{
 2ca:	cf 93       	push	r28
 2cc:	c8 2f       	mov	r28, r24
{
	switch(mode)
	{
		case SEND_COMMAND:
				// send command config rs=0   rw=0
				DIO_setPinValue(RS,0);
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_setPinValue>
				DIO_setPinValue(RW,0);
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_setPinValue>
				DIO_setPinValue(RS,1);
				DIO_setPinValue(RW,1);
				break;
		default: return INVALID_OPERATION_MODE;
	}
	Delay_ms_independent(1);
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	DIO_setPinValue(E,1); // stop operation
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_setPinValue>
	Delay_ms_independent(1);
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
//}

void LCD_SendCommand(uint8_t command)
{
	LCD_SetOperationMode(SEND_COMMAND);
	DIO_SetPortValue(LCD_DATA_BUFFER,command);
 2f8:	6c 2f       	mov	r22, r28
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_SetPortValue>
	Delay_ms_independent(1);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	LCD_StartOperation(); // start operation
 306:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_StartOperation>
	Delay_ms_independent(1);
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>


static void LCD_StopOperation(void)
{
	// set E pin
	DIO_setPinValue(E,1);
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_setPinValue>
	Delay_ms_independent(1);
	LCD_StartOperation(); // start operation
	Delay_ms_independent(1);
	LCD_StopOperation();
	// shift
	command = (command<<4);
 31a:	6c 2f       	mov	r22, r28
 31c:	62 95       	swap	r22
 31e:	60 7f       	andi	r22, 0xF0	; 240
	DIO_SetPortValue(LCD_DATA_BUFFER,command);
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_SetPortValue>
	Delay_ms_independent(1);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	LCD_StartOperation();
 32c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_StartOperation>
	Delay_ms_independent(1);
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
}
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <LCD_Init>:
	return 1;
}

void LCD_Init(void)
{
	Delay_ms_independent(10);
 33a:	8a e0       	ldi	r24, 0x0A	; 10
 33c:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	//- set Lcd pins as output
	//---- Control pins
	DIO_setPinDirection(E,OUTPUT);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
	Delay_ms_independent(1);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	DIO_setPinDirection(RW,OUTPUT);
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
	DIO_setPinDirection(RS,OUTPUT);
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
	Delay_ms_independent(1);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	//----- Data pins
	DIO_setPinDirection(LCD_D7,OUTPUT);
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	67 e0       	ldi	r22, 0x07	; 7
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D6,OUTPUT);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	66 e0       	ldi	r22, 0x06	; 6
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D5,OUTPUT);
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	65 e0       	ldi	r22, 0x05	; 5
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D4,OUTPUT);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	64 e0       	ldi	r22, 0x04	; 4
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
	//Delay_ms_independent(1);
	////LCD_IsBusy();
	//LCD_SendCommand(CLEAR_SCREEN);
	
	//-  follow init sequence
	LCD_SendCommand(0x02);// 4-bit mode
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCommand>
	//LCD_IsBusy();
	Delay_ms_independent(1);
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	LCD_SendCommand(_2LINES_58FORMAT_4BITMODE);
 39e:	88 e2       	ldi	r24, 0x28	; 40
 3a0:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCommand>
	//LCD_IsBusy();
	Delay_ms_independent(1);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	LCD_SendCommand(DISPLAY_ON_CURSOR_OFF);
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCommand>
	Delay_ms_independent(1);
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	LCD_SendCommand(CURSOR_RIGHT);
 3b6:	86 e0       	ldi	r24, 0x06	; 6
 3b8:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCommand>
	Delay_ms_independent(1);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	//LCD_IsBusy();
	LCD_SendCommand(CLEAR_SCREEN);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCommand>
 3c8:	08 95       	ret

000003ca <LCD_DisplayCharacter>:
	Delay_ms_independent(1);
}


void LCD_DisplayCharacter(uint8_t character)
{
 3ca:	cf 93       	push	r28
 3cc:	c8 2f       	mov	r28, r24
				DIO_setPinValue(RS,0);
				DIO_setPinValue(RW,0);
				break;
		case SEND_DATA:
				// send data config  rs=1   rw=0
				DIO_setPinValue(RS,1);
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_setPinValue>
				DIO_setPinValue(RW,0);
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_setPinValue>
				DIO_setPinValue(RS,1);
				DIO_setPinValue(RW,1);
				break;
		default: return INVALID_OPERATION_MODE;
	}
	Delay_ms_independent(1);
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	DIO_setPinValue(E,1); // stop operation
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	62 e0       	ldi	r22, 0x02	; 2
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_setPinValue>
	Delay_ms_independent(1);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>


void LCD_DisplayCharacter(uint8_t character)
{
	LCD_SetOperationMode(SEND_DATA);
	DIO_SetPortValue(LCD_DATA_BUFFER,character);
 3f8:	6c 2f       	mov	r22, r28
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_SetPortValue>
	Delay_ms_independent(1);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	LCD_StartOperation();
 406:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_StartOperation>
	Delay_ms_independent(1);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>


static void LCD_StopOperation(void)
{
	// set E pin
	DIO_setPinValue(E,1);
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_setPinValue>
	DIO_SetPortValue(LCD_DATA_BUFFER,character);
	Delay_ms_independent(1);
	LCD_StartOperation();
	Delay_ms_independent(1);
	LCD_StopOperation();
	Delay_ms_independent(1);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	DIO_SetPortValue(LCD_DATA_BUFFER,(character<<4));
 420:	6c 2f       	mov	r22, r28
 422:	62 95       	swap	r22
 424:	60 7f       	andi	r22, 0xF0	; 240
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_SetPortValue>
	Delay_ms_independent(1);
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	LCD_StartOperation();
 432:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_StartOperation>
	Delay_ms_independent(1);
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
}
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <SPI_Init>:

void SPI_Init(void)
{
	/* Configure SPI pins first (MUST) */
		#if  SPI_MODE == MasterMode 
			DIO_setPinDirection(MOSI,OUTPUT);
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	65 e0       	ldi	r22, 0x05	; 5
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
			DIO_setPinDirection(SS,OUTPUT);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	64 e0       	ldi	r22, 0x04	; 4
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
			DIO_setPinDirection(CLK,OUTPUT);
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	67 e0       	ldi	r22, 0x07	; 7
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
			DIO_setPinDirection(MISO,INPUT);
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	66 e0       	ldi	r22, 0x06	; 6
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPinDirection>
			SS_ENABLE();
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	64 e0       	ldi	r22, 0x04	; 4
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_setPinValue>
			DIO_setPinDirection(SS,INPUT);
			DIO_setPinDirection(CLK,INPUT);
			DIO_setPinDirection(MISO,OUTPUT);
		#endif
		/* Setup communication options */
		SPSR = DOUBLE_SPEED;
 472:	1e b8       	out	0x0e, r1	; 14
		SPCR = SPI_CLK | SPI_MODE | BIT_ORDER | INTERRUPT_STATE | SCK_MODE | SPI_ENABLE;
 474:	83 e5       	ldi	r24, 0x53	; 83
 476:	8d b9       	out	0x0d, r24	; 13
 478:	08 95       	ret

0000047a <SPI_sendChar>:
}
void SPI_sendChar(uint8_t character)
{
	SPDR = character;
 47a:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPSR,7) == 0);
 47c:	77 9b       	sbis	0x0e, 7	; 14
 47e:	fe cf       	rjmp	.-4      	; 0x47c <SPI_sendChar+0x2>
}
 480:	08 95       	ret

00000482 <main>:

uint8_t data[11] = "Hello SPI!";

int main(void)
{
	SPI_Init();
 482:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Init>
	LCD_Init();
 486:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_Init>
	
    while(1)
    {
        	for (uint8_t counter=0;data[counter] != '\0';counter++)
 48a:	10 e0       	ldi	r17, 0x00	; 0
 48c:	00 e0       	ldi	r16, 0x00	; 0
 48e:	14 c0       	rjmp	.+40     	; 0x4b8 <main+0x36>
        	{
				SPI_sendChar(data[counter]);
 490:	0e 94 3d 02 	call	0x47a	; 0x47a <SPI_sendChar>
				LCD_DisplayCharacter(data[counter]);
 494:	c0 5a       	subi	r28, 0xA0	; 160
 496:	df 4f       	sbci	r29, 0xFF	; 255
 498:	88 81       	ld	r24, Y
 49a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_DisplayCharacter>
				Delay_ms_independent(250);Delay_ms_independent(250);Delay_ms_independent(250);
 49e:	8a ef       	ldi	r24, 0xFA	; 250
 4a0:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
 4a4:	8a ef       	ldi	r24, 0xFA	; 250
 4a6:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
 4aa:	8a ef       	ldi	r24, 0xFA	; 250
 4ac:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
				Delay_ms_independent(250);		
 4b0:	8a ef       	ldi	r24, 0xFA	; 250
 4b2:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms_independent>
	SPI_Init();
	LCD_Init();
	
    while(1)
    {
        	for (uint8_t counter=0;data[counter] != '\0';counter++)
 4b6:	1f 5f       	subi	r17, 0xFF	; 255
 4b8:	c1 2f       	mov	r28, r17
 4ba:	d0 e0       	ldi	r29, 0x00	; 0
 4bc:	fe 01       	movw	r30, r28
 4be:	e0 5a       	subi	r30, 0xA0	; 160
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	80 81       	ld	r24, Z
 4c4:	81 11       	cpse	r24, r1
 4c6:	e4 cf       	rjmp	.-56     	; 0x490 <main+0xe>
				SPI_sendChar(data[counter]);
				LCD_DisplayCharacter(data[counter]);
				Delay_ms_independent(250);Delay_ms_independent(250);Delay_ms_independent(250);
				Delay_ms_independent(250);		
        	}
			LCD_SendCommand(CLEAR_SCREEN);
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCommand>
	SPI_Init();
	LCD_Init();
	
    while(1)
    {
        	for (uint8_t counter=0;data[counter] != '\0';counter++)
 4ce:	10 2f       	mov	r17, r16
				LCD_DisplayCharacter(data[counter]);
				Delay_ms_independent(250);Delay_ms_independent(250);Delay_ms_independent(250);
				Delay_ms_independent(250);		
        	}
			LCD_SendCommand(CLEAR_SCREEN);
    }
 4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <main+0x36>

000004d2 <__udivmodsi4>:
 4d2:	a1 e2       	ldi	r26, 0x21	; 33
 4d4:	1a 2e       	mov	r1, r26
 4d6:	aa 1b       	sub	r26, r26
 4d8:	bb 1b       	sub	r27, r27
 4da:	fd 01       	movw	r30, r26
 4dc:	0d c0       	rjmp	.+26     	; 0x4f8 <__udivmodsi4_ep>

000004de <__udivmodsi4_loop>:
 4de:	aa 1f       	adc	r26, r26
 4e0:	bb 1f       	adc	r27, r27
 4e2:	ee 1f       	adc	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	a2 17       	cp	r26, r18
 4e8:	b3 07       	cpc	r27, r19
 4ea:	e4 07       	cpc	r30, r20
 4ec:	f5 07       	cpc	r31, r21
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <__udivmodsi4_ep>
 4f0:	a2 1b       	sub	r26, r18
 4f2:	b3 0b       	sbc	r27, r19
 4f4:	e4 0b       	sbc	r30, r20
 4f6:	f5 0b       	sbc	r31, r21

000004f8 <__udivmodsi4_ep>:
 4f8:	66 1f       	adc	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	1a 94       	dec	r1
 502:	69 f7       	brne	.-38     	; 0x4de <__udivmodsi4_loop>
 504:	60 95       	com	r22
 506:	70 95       	com	r23
 508:	80 95       	com	r24
 50a:	90 95       	com	r25
 50c:	9b 01       	movw	r18, r22
 50e:	ac 01       	movw	r20, r24
 510:	bd 01       	movw	r22, r26
 512:	cf 01       	movw	r24, r30
 514:	08 95       	ret

00000516 <__umulhisi3>:
 516:	a2 9f       	mul	r26, r18
 518:	b0 01       	movw	r22, r0
 51a:	b3 9f       	mul	r27, r19
 51c:	c0 01       	movw	r24, r0
 51e:	a3 9f       	mul	r26, r19
 520:	70 0d       	add	r23, r0
 522:	81 1d       	adc	r24, r1
 524:	11 24       	eor	r1, r1
 526:	91 1d       	adc	r25, r1
 528:	b2 9f       	mul	r27, r18
 52a:	70 0d       	add	r23, r0
 52c:	81 1d       	adc	r24, r1
 52e:	11 24       	eor	r1, r1
 530:	91 1d       	adc	r25, r1
 532:	08 95       	ret

00000534 <_exit>:
 534:	f8 94       	cli

00000536 <__stop_program>:
 536:	ff cf       	rjmp	.-2      	; 0x536 <__stop_program>
