
SPI_comm_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000100  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000cf6  00000000  00000000  000006de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000456  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003ac  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000198  00000000  00000000  00001bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000044e  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000092d  00000000  00000000  000021be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000b0  00000000  00000000  00002aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
  64:	0c 94 ab 02 	jmp	0x556	; 0x556 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Delay_ms_independent>:
  6c:	28 2f       	mov	r18, r24
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	a8 ee       	ldi	r26, 0xE8	; 232
  72:	b3 e0       	ldi	r27, 0x03	; 3
  74:	0e 94 9c 02 	call	0x538	; 0x538 <__umulhisi3>
  78:	23 e0       	ldi	r18, 0x03	; 3
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__udivmodsi4>
  84:	21 15       	cp	r18, r1
  86:	31 05       	cpc	r19, r1
  88:	41 05       	cpc	r20, r1
  8a:	51 05       	cpc	r21, r1
  8c:	49 f0       	breq	.+18     	; 0xa0 <Delay_ms_independent+0x34>
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	31 09       	sbc	r19, r1
  92:	41 09       	sbc	r20, r1
  94:	51 09       	sbc	r21, r1
  96:	21 15       	cp	r18, r1
  98:	31 05       	cpc	r19, r1
  9a:	41 05       	cpc	r20, r1
  9c:	51 05       	cpc	r21, r1
  9e:	b9 f7       	brne	.-18     	; 0x8e <Delay_ms_independent+0x22>
  a0:	08 95       	ret

000000a2 <DIO_setPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"

sint8_t DIO_setPinDirection(uint8_t GPIO, uint8_t pin_number, uint8_t direction)
{
	switch (GPIO)
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	c9 f0       	breq	.+50     	; 0xd8 <DIO_setPinDirection+0x36>
  a6:	28 f0       	brcs	.+10     	; 0xb2 <DIO_setPinDirection+0x10>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	39 f1       	breq	.+78     	; 0xfa <DIO_setPinDirection+0x58>
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	b1 f1       	breq	.+108    	; 0x11c <DIO_setPinDirection+0x7a>
  b0:	46 c0       	rjmp	.+140    	; 0x13e <DIO_setPinDirection+0x9c>
	{
		case GPIOA:
			if (pin_number < 8) 
  b2:	68 30       	cpi	r22, 0x08	; 8
  b4:	08 f0       	brcs	.+2      	; 0xb8 <DIO_setPinDirection+0x16>
  b6:	45 c0       	rjmp	.+138    	; 0x142 <DIO_setPinDirection+0xa0>
			{
				if (direction <= 1)
  b8:	42 30       	cpi	r20, 0x02	; 2
  ba:	08 f0       	brcs	.+2      	; 0xbe <DIO_setPinDirection+0x1c>
  bc:	44 c0       	rjmp	.+136    	; 0x146 <DIO_setPinDirection+0xa4>
				{
					PORTA_DDR |= (direction<< pin_number);
  be:	8a b3       	in	r24, 0x1a	; 26
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	9a 01       	movw	r18, r20
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_setPinDirection+0x28>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_setPinDirection+0x24>
  ce:	b9 01       	movw	r22, r18
  d0:	68 2b       	or	r22, r24
  d2:	6a bb       	out	0x1a, r22	; 26
					return NO_ERRORS; // no errors
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
		return PIN_NUMBER_OUT_OF_RANGE; 
		
		case GPIOB:
			if (pin_number < 8)
  d8:	68 30       	cpi	r22, 0x08	; 8
  da:	b8 f5       	brcc	.+110    	; 0x14a <DIO_setPinDirection+0xa8>
			{
				if (direction <= 1)
  dc:	42 30       	cpi	r20, 0x02	; 2
  de:	b8 f5       	brcc	.+110    	; 0x14e <DIO_setPinDirection+0xac>
				{
					PORTB_DDR |= (direction<< pin_number);
  e0:	87 b3       	in	r24, 0x17	; 23
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	9a 01       	movw	r18, r20
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_setPinDirection+0x4a>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_setPinDirection+0x46>
  f0:	b9 01       	movw	r22, r18
  f2:	68 2b       	or	r22, r24
  f4:	67 bb       	out	0x17, r22	; 23
					return NO_ERRORS; // no errors
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
		
		case GPIOC:
			if (pin_number < 8)
  fa:	68 30       	cpi	r22, 0x08	; 8
  fc:	50 f5       	brcc	.+84     	; 0x152 <DIO_setPinDirection+0xb0>
			{
				if (direction <= 1)
  fe:	42 30       	cpi	r20, 0x02	; 2
 100:	50 f5       	brcc	.+84     	; 0x156 <DIO_setPinDirection+0xb4>
				{
					PORTC_DDR |= (direction<< pin_number);
 102:	84 b3       	in	r24, 0x14	; 20
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	9a 01       	movw	r18, r20
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_setPinDirection+0x6c>
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_setPinDirection+0x68>
 112:	b9 01       	movw	r22, r18
 114:	68 2b       	or	r22, r24
 116:	64 bb       	out	0x14, r22	; 20
					return NO_ERRORS; // no errors
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
		
		case GPIOD:
		if (pin_number < 8)
 11c:	68 30       	cpi	r22, 0x08	; 8
 11e:	e8 f4       	brcc	.+58     	; 0x15a <DIO_setPinDirection+0xb8>
		{
			if (direction <= 1)
 120:	42 30       	cpi	r20, 0x02	; 2
 122:	e8 f4       	brcc	.+58     	; 0x15e <DIO_setPinDirection+0xbc>
			{
				PORTD_DDR |= (direction<< pin_number);
 124:	81 b3       	in	r24, 0x11	; 17
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	9a 01       	movw	r18, r20
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDirection+0x8e>
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDirection+0x8a>
 134:	b9 01       	movw	r22, r18
 136:	68 2b       	or	r22, r24
 138:	61 bb       	out	0x11, r22	; 17
				return NO_ERRORS; // no errors
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret
			return INVALID_PIN_DIRECTION;
		}
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
			

	default: return INVALID_PORT_ID; // GPIO Id isn't defined
 13e:	8d ef       	ldi	r24, 0xFD	; 253
 140:	08 95       	ret
					PORTA_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
		return PIN_NUMBER_OUT_OF_RANGE; 
 142:	8e ef       	ldi	r24, 0xFE	; 254
 144:	08 95       	ret
				if (direction <= 1)
				{
					PORTA_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	08 95       	ret
					PORTB_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
 14a:	8e ef       	ldi	r24, 0xFE	; 254
 14c:	08 95       	ret
				if (direction <= 1)
				{
					PORTB_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	08 95       	ret
					PORTC_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
 152:	8e ef       	ldi	r24, 0xFE	; 254
 154:	08 95       	ret
				if (direction <= 1)
				{
					PORTC_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	08 95       	ret
				PORTD_DDR |= (direction<< pin_number);
				return NO_ERRORS; // no errors
			}
			return INVALID_PIN_DIRECTION;
		}
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
 15a:	8e ef       	ldi	r24, 0xFE	; 254
 15c:	08 95       	ret
			if (direction <= 1)
			{
				PORTD_DDR |= (direction<< pin_number);
				return NO_ERRORS; // no errors
			}
			return INVALID_PIN_DIRECTION;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
			

	default: return INVALID_PORT_ID; // GPIO Id isn't defined
	}
}
 160:	08 95       	ret

00000162 <DIO_setPinValue>:



sint8_t DIO_setPinValue(uint8_t GPIO, uint8_t pin_number, uint8_t value)
{
	switch (GPIO)
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	41 f1       	breq	.+80     	; 0x1b6 <DIO_setPinValue+0x54>
 166:	38 f0       	brcs	.+14     	; 0x176 <DIO_setPinValue+0x14>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	09 f4       	brne	.+2      	; 0x16e <DIO_setPinValue+0xc>
 16c:	44 c0       	rjmp	.+136    	; 0x1f6 <DIO_setPinValue+0x94>
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	09 f4       	brne	.+2      	; 0x174 <DIO_setPinValue+0x12>
 172:	61 c0       	rjmp	.+194    	; 0x236 <DIO_setPinValue+0xd4>
 174:	7f c0       	rjmp	.+254    	; 0x274 <DIO_setPinValue+0x112>
	{
		case GPIOA:
		if (pin_number < 8)
 176:	68 30       	cpi	r22, 0x08	; 8
 178:	08 f0       	brcs	.+2      	; 0x17c <DIO_setPinValue+0x1a>
 17a:	7e c0       	rjmp	.+252    	; 0x278 <DIO_setPinValue+0x116>
		{
			if (GET_BIT(value, 0) == LOW)
 17c:	40 fd       	sbrc	r20, 0
 17e:	0e c0       	rjmp	.+28     	; 0x19c <DIO_setPinValue+0x3a>
			{
				CLR_BIT(PORTA_DATA, pin_number);
 180:	2b b3       	in	r18, 0x1b	; 27
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	ac 01       	movw	r20, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_setPinValue+0x2c>
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_setPinValue+0x28>
 192:	ba 01       	movw	r22, r20
 194:	60 95       	com	r22
 196:	62 23       	and	r22, r18
 198:	6b bb       	out	0x1b, r22	; 27
 19a:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTA_DATA, pin_number);
 19c:	2b b3       	in	r18, 0x1b	; 27
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	ac 01       	movw	r20, r24
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_setPinValue+0x48>
 1a6:	44 0f       	add	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_setPinValue+0x44>
 1ae:	ba 01       	movw	r22, r20
 1b0:	62 2b       	or	r22, r18
 1b2:	6b bb       	out	0x1b, r22	; 27
 1b4:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error


		case GPIOB:
		if (pin_number < 8)
 1b6:	68 30       	cpi	r22, 0x08	; 8
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <DIO_setPinValue+0x5a>
 1ba:	60 c0       	rjmp	.+192    	; 0x27c <DIO_setPinValue+0x11a>
		{
			if (GET_BIT(value, 0) == LOW)
 1bc:	40 fd       	sbrc	r20, 0
 1be:	0e c0       	rjmp	.+28     	; 0x1dc <DIO_setPinValue+0x7a>
			{
				CLR_BIT(PORTB_DATA, pin_number);
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	ac 01       	movw	r20, r24
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_setPinValue+0x6c>
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_setPinValue+0x68>
 1d2:	ba 01       	movw	r22, r20
 1d4:	60 95       	com	r22
 1d6:	62 23       	and	r22, r18
 1d8:	68 bb       	out	0x18, r22	; 24
 1da:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTB_DATA, pin_number);
 1dc:	28 b3       	in	r18, 0x18	; 24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	ac 01       	movw	r20, r24
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x88>
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x84>
 1ee:	ba 01       	movw	r22, r20
 1f0:	62 2b       	or	r22, r18
 1f2:	68 bb       	out	0x18, r22	; 24
 1f4:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error

		
		case GPIOC:
		if (pin_number < 8)
 1f6:	68 30       	cpi	r22, 0x08	; 8
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <DIO_setPinValue+0x9a>
 1fa:	42 c0       	rjmp	.+132    	; 0x280 <DIO_setPinValue+0x11e>
		{
			if (GET_BIT(value, 0) == LOW)
 1fc:	40 fd       	sbrc	r20, 0
 1fe:	0e c0       	rjmp	.+28     	; 0x21c <DIO_setPinValue+0xba>
			{
				CLR_BIT(PORTC_DATA, pin_number);
 200:	25 b3       	in	r18, 0x15	; 21
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_setPinValue+0xac>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_setPinValue+0xa8>
 212:	ba 01       	movw	r22, r20
 214:	60 95       	com	r22
 216:	62 23       	and	r22, r18
 218:	65 bb       	out	0x15, r22	; 21
 21a:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTC_DATA, pin_number);
 21c:	25 b3       	in	r18, 0x15	; 21
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ac 01       	movw	r20, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_setPinValue+0xc8>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_setPinValue+0xc4>
 22e:	ba 01       	movw	r22, r20
 230:	62 2b       	or	r22, r18
 232:	65 bb       	out	0x15, r22	; 21
 234:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error

		
		case GPIOD:
		if (pin_number < 8)
 236:	68 30       	cpi	r22, 0x08	; 8
 238:	28 f5       	brcc	.+74     	; 0x284 <DIO_setPinValue+0x122>
		{
			if (GET_BIT(value, 0) == LOW)
 23a:	40 fd       	sbrc	r20, 0
 23c:	0e c0       	rjmp	.+28     	; 0x25a <DIO_setPinValue+0xf8>
			{
				CLR_BIT(PORTD_DATA, pin_number);
 23e:	22 b3       	in	r18, 0x12	; 18
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ac 01       	movw	r20, r24
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_setPinValue+0xea>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_setPinValue+0xe6>
 250:	ba 01       	movw	r22, r20
 252:	60 95       	com	r22
 254:	62 23       	and	r22, r18
 256:	62 bb       	out	0x12, r22	; 18
 258:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTD_DATA, pin_number);
 25a:	22 b3       	in	r18, 0x12	; 18
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	ac 01       	movw	r20, r24
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_setPinValue+0x106>
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_setPinValue+0x102>
 26c:	ba 01       	movw	r22, r20
 26e:	62 2b       	or	r22, r18
 270:	62 bb       	out	0x12, r22	; 18
 272:	08 95       	ret
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error


		default: return INVALID_PORT_ID; // GPIO Id isn't defined
 274:	8d ef       	ldi	r24, 0xFD	; 253
 276:	08 95       	ret
			{
				SET_BIT(PORTA_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 278:	8e ef       	ldi	r24, 0xFE	; 254
 27a:	08 95       	ret
			{
				SET_BIT(PORTB_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 27c:	8e ef       	ldi	r24, 0xFE	; 254
 27e:	08 95       	ret
			{
				SET_BIT(PORTC_DATA, pin_number);
			}
			return NO_ERRORS; 
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 280:	8e ef       	ldi	r24, 0xFE	; 254
 282:	08 95       	ret
			{
				SET_BIT(PORTD_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 284:	8e ef       	ldi	r24, 0xFE	; 254


		default: return INVALID_PORT_ID; // GPIO Id isn't defined
	}
}
 286:	08 95       	ret

00000288 <DIO_SetPortValue>:
	}
	return value ;
}

void DIO_SetPortValue (uint8_t PortNumber , uint8_t Value) {
	switch(PortNumber) {
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	41 f0       	breq	.+16     	; 0x29c <DIO_SetPortValue+0x14>
 28c:	28 f0       	brcs	.+10     	; 0x298 <DIO_SetPortValue+0x10>
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	39 f0       	breq	.+14     	; 0x2a0 <DIO_SetPortValue+0x18>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	39 f0       	breq	.+14     	; 0x2a4 <DIO_SetPortValue+0x1c>
 296:	08 95       	ret
		case GPIOA :
		PORTA_DATA = Value ;
 298:	6b bb       	out	0x1b, r22	; 27
		break;
 29a:	08 95       	ret
		
		case GPIOB :
		PORTB_DATA = Value ;
 29c:	68 bb       	out	0x18, r22	; 24
		break;
 29e:	08 95       	ret
		
		case GPIOC :
		PORTC_DATA = Value ;
 2a0:	65 bb       	out	0x15, r22	; 21
		break;
 2a2:	08 95       	ret
		
		case GPIOD :
		PORTD_DATA = Value ;
 2a4:	62 bb       	out	0x12, r22	; 18
 2a6:	08 95       	ret

000002a8 <DIO_SetPortDirection>:
		break;
	}
}

void DIO_SetPortDirection (uint8_t PortNumber , uint8_t Direction) {
	switch(PortNumber) {
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	79 f0       	breq	.+30     	; 0x2ca <DIO_SetPortDirection+0x22>
 2ac:	28 f0       	brcs	.+10     	; 0x2b8 <DIO_SetPortDirection+0x10>
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	a9 f0       	breq	.+42     	; 0x2dc <DIO_SetPortDirection+0x34>
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	e1 f0       	breq	.+56     	; 0x2ee <DIO_SetPortDirection+0x46>
 2b6:	08 95       	ret
		case GPIOA :
		if (Direction == OUTPUT) {
 2b8:	61 30       	cpi	r22, 0x01	; 1
 2ba:	19 f4       	brne	.+6      	; 0x2c2 <DIO_SetPortDirection+0x1a>
			PORTA_DDR = 0xff ;
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	8a bb       	out	0x1a, r24	; 26
 2c0:	08 95       	ret
		}
		else if (Direction == INPUT) {
 2c2:	61 11       	cpse	r22, r1
 2c4:	1c c0       	rjmp	.+56     	; 0x2fe <DIO_SetPortDirection+0x56>
			PORTA_DDR = 0x00 ;
 2c6:	1a ba       	out	0x1a, r1	; 26
 2c8:	08 95       	ret
		}
		break;
		
		case GPIOB :
		if (Direction == OUTPUT) {
 2ca:	61 30       	cpi	r22, 0x01	; 1
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <DIO_SetPortDirection+0x2c>
			PORTB_DDR = 0xff ;
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	87 bb       	out	0x17, r24	; 23
 2d2:	08 95       	ret
		}
		else if (Direction == INPUT) {
 2d4:	61 11       	cpse	r22, r1
 2d6:	13 c0       	rjmp	.+38     	; 0x2fe <DIO_SetPortDirection+0x56>
			PORTB_DDR = 0x00 ;
 2d8:	17 ba       	out	0x17, r1	; 23
 2da:	08 95       	ret
		}
		break;
		
		case GPIOC :
		if (Direction == OUTPUT) {
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	19 f4       	brne	.+6      	; 0x2e6 <DIO_SetPortDirection+0x3e>
			PORTC_DDR = 0xff ;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	84 bb       	out	0x14, r24	; 20
 2e4:	08 95       	ret
		}
		else if (Direction == INPUT) {
 2e6:	61 11       	cpse	r22, r1
 2e8:	0a c0       	rjmp	.+20     	; 0x2fe <DIO_SetPortDirection+0x56>
			PORTC_DDR = 0x00 ;
 2ea:	14 ba       	out	0x14, r1	; 20
 2ec:	08 95       	ret
		}
		break;
		
		case GPIOD :
		if (Direction == OUTPUT) {
 2ee:	61 30       	cpi	r22, 0x01	; 1
 2f0:	19 f4       	brne	.+6      	; 0x2f8 <DIO_SetPortDirection+0x50>
			PORTD_DDR = 0xff ;
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	81 bb       	out	0x11, r24	; 17
 2f6:	08 95       	ret
		}
		else if (Direction == INPUT) {
 2f8:	61 11       	cpse	r22, r1
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <DIO_SetPortDirection+0x56>
			PORTD_DDR = 0x00 ;
 2fc:	11 ba       	out	0x11, r1	; 17
 2fe:	08 95       	ret

00000300 <LCD_StartOperation>:
}

static void LCD_StartOperation(void)
{
	// clear E pin
	DIO_setPinValue(E,0);	
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_setPinValue>
 30a:	08 95       	ret

0000030c <LCD_SendCommand>:
	//LCD_sendCommand(CLEAR_SCREEN);
	//_delay_ms(2);
//}

void LCD_SendCommand(uint8_t command)
{
 30c:	cf 93       	push	r28
 30e:	c8 2f       	mov	r28, r24
{
	switch(mode)
	{
		case SEND_COMMAND:
				// send command config rs=0   rw=0
				DIO_setPinValue(RS,0);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_setPinValue>
				DIO_setPinValue(RW,0);
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_setPinValue>
				DIO_setPinValue(RS,1);
				DIO_setPinValue(RW,1);
				break;
		default: return INVALID_OPERATION_MODE;
	}
	Delay_ms_independent(1);
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	DIO_setPinValue(E,1); // stop operation
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_setPinValue>
	Delay_ms_independent(1);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
//}

void LCD_SendCommand(uint8_t command)
{
	LCD_SetOperationMode(SEND_COMMAND);
	DIO_SetPortValue(LCD_DATA_BUFFER,command);
 33a:	6c 2f       	mov	r22, r28
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 44 01 	call	0x288	; 0x288 <DIO_SetPortValue>
	Delay_ms_independent(1);
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	LCD_StartOperation(); // start operation
 348:	0e 94 80 01 	call	0x300	; 0x300 <LCD_StartOperation>
	Delay_ms_independent(1);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>


static void LCD_StopOperation(void)
{
	// set E pin
	DIO_setPinValue(E,1);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_setPinValue>
	Delay_ms_independent(1);
	LCD_StartOperation(); // start operation
	Delay_ms_independent(1);
	LCD_StopOperation();
	// shift
	command = (command<<4);
 35c:	6c 2f       	mov	r22, r28
 35e:	62 95       	swap	r22
 360:	60 7f       	andi	r22, 0xF0	; 240
	DIO_SetPortValue(LCD_DATA_BUFFER,command);
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 44 01 	call	0x288	; 0x288 <DIO_SetPortValue>
	Delay_ms_independent(1);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	LCD_StartOperation();
 36e:	0e 94 80 01 	call	0x300	; 0x300 <LCD_StartOperation>
	Delay_ms_independent(1);
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
}
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <LCD_Init>:
	return 1;
}

void LCD_Init(void)
{
	Delay_ms_independent(10);
 37c:	8a e0       	ldi	r24, 0x0A	; 10
 37e:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	//- set Lcd pins as output
	//---- Control pins
	DIO_setPinDirection(E,OUTPUT);
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	62 e0       	ldi	r22, 0x02	; 2
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
	Delay_ms_independent(1);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	DIO_setPinDirection(RW,OUTPUT);
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
	DIO_setPinDirection(RS,OUTPUT);
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
	Delay_ms_independent(1);
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	//----- Data pins
	DIO_setPinDirection(LCD_D7,OUTPUT);
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	67 e0       	ldi	r22, 0x07	; 7
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D6,OUTPUT);
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	66 e0       	ldi	r22, 0x06	; 6
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D5,OUTPUT);
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	65 e0       	ldi	r22, 0x05	; 5
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D4,OUTPUT);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	64 e0       	ldi	r22, 0x04	; 4
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
	//Delay_ms_independent(1);
	////LCD_IsBusy();
	//LCD_SendCommand(CLEAR_SCREEN);
	
	//-  follow init sequence
	LCD_SendCommand(0x02);// 4-bit mode
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_SendCommand>
	//LCD_IsBusy();
	Delay_ms_independent(1);
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	LCD_SendCommand(_2LINES_58FORMAT_4BITMODE);
 3e0:	88 e2       	ldi	r24, 0x28	; 40
 3e2:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_SendCommand>
	//LCD_IsBusy();
	Delay_ms_independent(1);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	LCD_SendCommand(DISPLAY_ON_CURSOR_OFF);
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_SendCommand>
	Delay_ms_independent(1);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	LCD_SendCommand(CURSOR_RIGHT);
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_SendCommand>
	Delay_ms_independent(1);
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	//LCD_IsBusy();
	LCD_SendCommand(CLEAR_SCREEN);
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_SendCommand>
 40a:	08 95       	ret

0000040c <LCD_DisplayCharacter>:
	Delay_ms_independent(1);
}


void LCD_DisplayCharacter(uint8_t character)
{
 40c:	cf 93       	push	r28
 40e:	c8 2f       	mov	r28, r24
				DIO_setPinValue(RS,0);
				DIO_setPinValue(RW,0);
				break;
		case SEND_DATA:
				// send data config  rs=1   rw=0
				DIO_setPinValue(RS,1);
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_setPinValue>
				DIO_setPinValue(RW,0);
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_setPinValue>
				DIO_setPinValue(RS,1);
				DIO_setPinValue(RW,1);
				break;
		default: return INVALID_OPERATION_MODE;
	}
	Delay_ms_independent(1);
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	DIO_setPinValue(E,1); // stop operation
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_setPinValue>
	Delay_ms_independent(1);
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>


void LCD_DisplayCharacter(uint8_t character)
{
	LCD_SetOperationMode(SEND_DATA);
	DIO_SetPortValue(LCD_DATA_BUFFER,character);
 43a:	6c 2f       	mov	r22, r28
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 44 01 	call	0x288	; 0x288 <DIO_SetPortValue>
	Delay_ms_independent(1);
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	LCD_StartOperation();
 448:	0e 94 80 01 	call	0x300	; 0x300 <LCD_StartOperation>
	Delay_ms_independent(1);
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>


static void LCD_StopOperation(void)
{
	// set E pin
	DIO_setPinValue(E,1);
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	62 e0       	ldi	r22, 0x02	; 2
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_setPinValue>
	DIO_SetPortValue(LCD_DATA_BUFFER,character);
	Delay_ms_independent(1);
	LCD_StartOperation();
	Delay_ms_independent(1);
	LCD_StopOperation();
	Delay_ms_independent(1);
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	DIO_SetPortValue(LCD_DATA_BUFFER,(character<<4));
 462:	6c 2f       	mov	r22, r28
 464:	62 95       	swap	r22
 466:	60 7f       	andi	r22, 0xF0	; 240
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	0e 94 44 01 	call	0x288	; 0x288 <DIO_SetPortValue>
	Delay_ms_independent(1);
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
	LCD_StartOperation();
 474:	0e 94 80 01 	call	0x300	; 0x300 <LCD_StartOperation>
	Delay_ms_independent(1);
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms_independent>
}
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <SPI_Init>:

void SPI_Init(void)
{
	/* Configure SPI Pins first (MUST) */
		#if  SPI_MODE == MasterMode 
			DIO_setPinDirection(MOSI,OUTPUT);
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	65 e0       	ldi	r22, 0x05	; 5
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
			DIO_setPinDirection(SS,OUTPUT);
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	64 e0       	ldi	r22, 0x04	; 4
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
			DIO_setPinDirection(CLK,OUTPUT);
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	67 e0       	ldi	r22, 0x07	; 7
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
			DIO_setPinDirection(MISO,INPUT);
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	66 e0       	ldi	r22, 0x06	; 6
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_setPinDirection>
			SS_ENABLE();
 4aa:	40 e0       	ldi	r20, 0x00	; 0
 4ac:	64 e0       	ldi	r22, 0x04	; 4
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_setPinValue>
			DIO_setPinDirection(SS,INPUT);
			DIO_setPinDirection(CLK,INPUT);
			DIO_setPinDirection(MISO,OUTPUT);
		#endif
		/* setup SPI communication options */
		SPSR = DOUBLE_SPEED;
 4b4:	1e b8       	out	0x0e, r1	; 14
		SPCR = SPI_CLK | SPI_MODE | BIT_ORDER | INTERRUPT_STATE | SCK_MODE | SPI_ENABLE;
 4b6:	83 e4       	ldi	r24, 0x43	; 67
 4b8:	8d b9       	out	0x0d, r24	; 13
 4ba:	08 95       	ret

000004bc <SPI_ReceiveChar>:
	SPDR = character;
	while(GET_BIT(SPSR,7) == 0);
}
uint8_t SPI_ReceiveChar(void)
{
	while(GET_BIT(SPSR,7) == 0);
 4bc:	77 9b       	sbis	0x0e, 7	; 14
 4be:	fe cf       	rjmp	.-4      	; 0x4bc <SPI_ReceiveChar>
	return SPDR;
 4c0:	8f b1       	in	r24, 0x0f	; 15
}
 4c2:	08 95       	ret

000004c4 <main>:
#include "LCD_interface.h"


int main(void)
{
	DIO_SetPortDirection(GPIOC,OUTPUT);
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_SetPortDirection>
	LCD_Init();
 4cc:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Init>
	SPI_Init();
 4d0:	0e 94 41 02 	call	0x482	; 0x482 <SPI_Init>
	
    while(1)
    {
		uint8_t data = SPI_ReceiveChar();
 4d4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <SPI_ReceiveChar>
 4d8:	c8 2f       	mov	r28, r24
		DIO_SetPortValue(GPIOC,data);
 4da:	68 2f       	mov	r22, r24
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	0e 94 44 01 	call	0x288	; 0x288 <DIO_SetPortValue>
		LCD_DisplayCharacter(data);
 4e2:	8c 2f       	mov	r24, r28
 4e4:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_DisplayCharacter>
		if (data == '!')
 4e8:	c1 32       	cpi	r28, 0x21	; 33
 4ea:	a1 f7       	brne	.-24     	; 0x4d4 <main+0x10>
		{
			LCD_SendCommand(CLEAR_SCREEN);
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_SendCommand>
 4f2:	f0 cf       	rjmp	.-32     	; 0x4d4 <main+0x10>

000004f4 <__udivmodsi4>:
 4f4:	a1 e2       	ldi	r26, 0x21	; 33
 4f6:	1a 2e       	mov	r1, r26
 4f8:	aa 1b       	sub	r26, r26
 4fa:	bb 1b       	sub	r27, r27
 4fc:	fd 01       	movw	r30, r26
 4fe:	0d c0       	rjmp	.+26     	; 0x51a <__udivmodsi4_ep>

00000500 <__udivmodsi4_loop>:
 500:	aa 1f       	adc	r26, r26
 502:	bb 1f       	adc	r27, r27
 504:	ee 1f       	adc	r30, r30
 506:	ff 1f       	adc	r31, r31
 508:	a2 17       	cp	r26, r18
 50a:	b3 07       	cpc	r27, r19
 50c:	e4 07       	cpc	r30, r20
 50e:	f5 07       	cpc	r31, r21
 510:	20 f0       	brcs	.+8      	; 0x51a <__udivmodsi4_ep>
 512:	a2 1b       	sub	r26, r18
 514:	b3 0b       	sbc	r27, r19
 516:	e4 0b       	sbc	r30, r20
 518:	f5 0b       	sbc	r31, r21

0000051a <__udivmodsi4_ep>:
 51a:	66 1f       	adc	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	1a 94       	dec	r1
 524:	69 f7       	brne	.-38     	; 0x500 <__udivmodsi4_loop>
 526:	60 95       	com	r22
 528:	70 95       	com	r23
 52a:	80 95       	com	r24
 52c:	90 95       	com	r25
 52e:	9b 01       	movw	r18, r22
 530:	ac 01       	movw	r20, r24
 532:	bd 01       	movw	r22, r26
 534:	cf 01       	movw	r24, r30
 536:	08 95       	ret

00000538 <__umulhisi3>:
 538:	a2 9f       	mul	r26, r18
 53a:	b0 01       	movw	r22, r0
 53c:	b3 9f       	mul	r27, r19
 53e:	c0 01       	movw	r24, r0
 540:	a3 9f       	mul	r26, r19
 542:	70 0d       	add	r23, r0
 544:	81 1d       	adc	r24, r1
 546:	11 24       	eor	r1, r1
 548:	91 1d       	adc	r25, r1
 54a:	b2 9f       	mul	r27, r18
 54c:	70 0d       	add	r23, r0
 54e:	81 1d       	adc	r24, r1
 550:	11 24       	eor	r1, r1
 552:	91 1d       	adc	r25, r1
 554:	08 95       	ret

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
