
SPI_communicateMCUs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800074  00800074  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009dc  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e5  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030e  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000545  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a62  00000000  00000000  00001d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000278b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  8a:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_setPinDirection+0x36>
  96:	28 f0       	brcs	.+10     	; 0xa2 <DIO_setPinDirection+0x10>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	39 f1       	breq	.+78     	; 0xea <DIO_setPinDirection+0x58>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	b1 f1       	breq	.+108    	; 0x10c <DIO_setPinDirection+0x7a>
  a0:	46 c0       	rjmp	.+140    	; 0x12e <DIO_setPinDirection+0x9c>
  a2:	68 30       	cpi	r22, 0x08	; 8
  a4:	08 f0       	brcs	.+2      	; 0xa8 <DIO_setPinDirection+0x16>
  a6:	45 c0       	rjmp	.+138    	; 0x132 <DIO_setPinDirection+0xa0>
  a8:	42 30       	cpi	r20, 0x02	; 2
  aa:	08 f0       	brcs	.+2      	; 0xae <DIO_setPinDirection+0x1c>
  ac:	44 c0       	rjmp	.+136    	; 0x136 <DIO_setPinDirection+0xa4>
  ae:	8a b3       	in	r24, 0x1a	; 26
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	9a 01       	movw	r18, r20
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_setPinDirection+0x28>
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_setPinDirection+0x24>
  be:	b9 01       	movw	r22, r18
  c0:	68 2b       	or	r22, r24
  c2:	6a bb       	out	0x1a, r22	; 26
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	08 95       	ret
  c8:	68 30       	cpi	r22, 0x08	; 8
  ca:	b8 f5       	brcc	.+110    	; 0x13a <DIO_setPinDirection+0xa8>
  cc:	42 30       	cpi	r20, 0x02	; 2
  ce:	b8 f5       	brcc	.+110    	; 0x13e <DIO_setPinDirection+0xac>
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	9a 01       	movw	r18, r20
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_setPinDirection+0x4a>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_setPinDirection+0x46>
  e0:	b9 01       	movw	r22, r18
  e2:	68 2b       	or	r22, r24
  e4:	67 bb       	out	0x17, r22	; 23
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret
  ea:	68 30       	cpi	r22, 0x08	; 8
  ec:	50 f5       	brcc	.+84     	; 0x142 <DIO_setPinDirection+0xb0>
  ee:	42 30       	cpi	r20, 0x02	; 2
  f0:	50 f5       	brcc	.+84     	; 0x146 <DIO_setPinDirection+0xb4>
  f2:	84 b3       	in	r24, 0x14	; 20
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	9a 01       	movw	r18, r20
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_setPinDirection+0x6c>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_setPinDirection+0x68>
 102:	b9 01       	movw	r22, r18
 104:	68 2b       	or	r22, r24
 106:	64 bb       	out	0x14, r22	; 20
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	08 95       	ret
 10c:	68 30       	cpi	r22, 0x08	; 8
 10e:	e8 f4       	brcc	.+58     	; 0x14a <DIO_setPinDirection+0xb8>
 110:	42 30       	cpi	r20, 0x02	; 2
 112:	e8 f4       	brcc	.+58     	; 0x14e <DIO_setPinDirection+0xbc>
 114:	81 b3       	in	r24, 0x11	; 17
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	9a 01       	movw	r18, r20
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_setPinDirection+0x8e>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_setPinDirection+0x8a>
 124:	b9 01       	movw	r22, r18
 126:	68 2b       	or	r22, r24
 128:	61 bb       	out	0x11, r22	; 17
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret
 12e:	8d ef       	ldi	r24, 0xFD	; 253
 130:	08 95       	ret
 132:	8e ef       	ldi	r24, 0xFE	; 254
 134:	08 95       	ret
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	08 95       	ret
 13a:	8e ef       	ldi	r24, 0xFE	; 254
 13c:	08 95       	ret
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	08 95       	ret
 142:	8e ef       	ldi	r24, 0xFE	; 254
 144:	08 95       	ret
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	08 95       	ret
 14a:	8e ef       	ldi	r24, 0xFE	; 254
 14c:	08 95       	ret
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	08 95       	ret

00000152 <DIO_setPinValue>:
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	41 f1       	breq	.+80     	; 0x1a6 <DIO_setPinValue+0x54>
 156:	38 f0       	brcs	.+14     	; 0x166 <DIO_setPinValue+0x14>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	09 f4       	brne	.+2      	; 0x15e <DIO_setPinValue+0xc>
 15c:	44 c0       	rjmp	.+136    	; 0x1e6 <DIO_setPinValue+0x94>
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	09 f4       	brne	.+2      	; 0x164 <DIO_setPinValue+0x12>
 162:	61 c0       	rjmp	.+194    	; 0x226 <DIO_setPinValue+0xd4>
 164:	7f c0       	rjmp	.+254    	; 0x264 <DIO_setPinValue+0x112>
 166:	68 30       	cpi	r22, 0x08	; 8
 168:	08 f0       	brcs	.+2      	; 0x16c <DIO_setPinValue+0x1a>
 16a:	7e c0       	rjmp	.+252    	; 0x268 <DIO_setPinValue+0x116>
 16c:	40 fd       	sbrc	r20, 0
 16e:	0e c0       	rjmp	.+28     	; 0x18c <DIO_setPinValue+0x3a>
 170:	2b b3       	in	r18, 0x1b	; 27
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ac 01       	movw	r20, r24
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_setPinValue+0x2c>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_setPinValue+0x28>
 182:	ba 01       	movw	r22, r20
 184:	60 95       	com	r22
 186:	62 23       	and	r22, r18
 188:	6b bb       	out	0x1b, r22	; 27
 18a:	08 95       	ret
 18c:	2b b3       	in	r18, 0x1b	; 27
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setPinValue+0x48>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setPinValue+0x44>
 19e:	ba 01       	movw	r22, r20
 1a0:	62 2b       	or	r22, r18
 1a2:	6b bb       	out	0x1b, r22	; 27
 1a4:	08 95       	ret
 1a6:	68 30       	cpi	r22, 0x08	; 8
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <DIO_setPinValue+0x5a>
 1aa:	60 c0       	rjmp	.+192    	; 0x26c <DIO_setPinValue+0x11a>
 1ac:	40 fd       	sbrc	r20, 0
 1ae:	0e c0       	rjmp	.+28     	; 0x1cc <DIO_setPinValue+0x7a>
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	ac 01       	movw	r20, r24
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_setPinValue+0x6c>
 1ba:	44 0f       	add	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_setPinValue+0x68>
 1c2:	ba 01       	movw	r22, r20
 1c4:	60 95       	com	r22
 1c6:	62 23       	and	r22, r18
 1c8:	68 bb       	out	0x18, r22	; 24
 1ca:	08 95       	ret
 1cc:	28 b3       	in	r18, 0x18	; 24
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	ac 01       	movw	r20, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_setPinValue+0x88>
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_setPinValue+0x84>
 1de:	ba 01       	movw	r22, r20
 1e0:	62 2b       	or	r22, r18
 1e2:	68 bb       	out	0x18, r22	; 24
 1e4:	08 95       	ret
 1e6:	68 30       	cpi	r22, 0x08	; 8
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <DIO_setPinValue+0x9a>
 1ea:	42 c0       	rjmp	.+132    	; 0x270 <DIO_setPinValue+0x11e>
 1ec:	40 fd       	sbrc	r20, 0
 1ee:	0e c0       	rjmp	.+28     	; 0x20c <DIO_setPinValue+0xba>
 1f0:	25 b3       	in	r18, 0x15	; 21
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ac 01       	movw	r20, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_setPinValue+0xac>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_setPinValue+0xa8>
 202:	ba 01       	movw	r22, r20
 204:	60 95       	com	r22
 206:	62 23       	and	r22, r18
 208:	65 bb       	out	0x15, r22	; 21
 20a:	08 95       	ret
 20c:	25 b3       	in	r18, 0x15	; 21
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_setPinValue+0xc8>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_setPinValue+0xc4>
 21e:	ba 01       	movw	r22, r20
 220:	62 2b       	or	r22, r18
 222:	65 bb       	out	0x15, r22	; 21
 224:	08 95       	ret
 226:	68 30       	cpi	r22, 0x08	; 8
 228:	28 f5       	brcc	.+74     	; 0x274 <DIO_setPinValue+0x122>
 22a:	40 fd       	sbrc	r20, 0
 22c:	0e c0       	rjmp	.+28     	; 0x24a <DIO_setPinValue+0xf8>
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_setPinValue+0xea>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_setPinValue+0xe6>
 240:	ba 01       	movw	r22, r20
 242:	60 95       	com	r22
 244:	62 23       	and	r22, r18
 246:	62 bb       	out	0x12, r22	; 18
 248:	08 95       	ret
 24a:	22 b3       	in	r18, 0x12	; 18
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	ac 01       	movw	r20, r24
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_setPinValue+0x106>
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_setPinValue+0x102>
 25c:	ba 01       	movw	r22, r20
 25e:	62 2b       	or	r22, r18
 260:	62 bb       	out	0x12, r22	; 18
 262:	08 95       	ret
 264:	8d ef       	ldi	r24, 0xFD	; 253
 266:	08 95       	ret
 268:	8e ef       	ldi	r24, 0xFE	; 254
 26a:	08 95       	ret
 26c:	8e ef       	ldi	r24, 0xFE	; 254
 26e:	08 95       	ret
 270:	8e ef       	ldi	r24, 0xFE	; 254
 272:	08 95       	ret
 274:	8e ef       	ldi	r24, 0xFE	; 254
 276:	08 95       	ret

00000278 <SPI_Init>:

void SPI_Init(void)
{
	/* Configure SPI pins first (MUST) */
		#if  SPI_MODE == MasterMode 
			DIO_setPinDirection(MOSI,OUTPUT);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	65 e0       	ldi	r22, 0x05	; 5
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
			DIO_setPinDirection(SS,OUTPUT);
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	64 e0       	ldi	r22, 0x04	; 4
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
			DIO_setPinDirection(CLK,OUTPUT);
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	67 e0       	ldi	r22, 0x07	; 7
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
			DIO_setPinDirection(MISO,INPUT);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	66 e0       	ldi	r22, 0x06	; 6
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
			SS_ENABLE();
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_setPinValue>
			DIO_setPinDirection(SS,INPUT);
			DIO_setPinDirection(CLK,INPUT);
			DIO_setPinDirection(MISO,OUTPUT);
		#endif
		/* Setup communication options */
		SPSR = DOUBLE_SPEED;
 2aa:	1e b8       	out	0x0e, r1	; 14
		SPCR = SPI_CLK | SPI_MODE | BIT_ORDER | INTERRUPT_STATE | SCK_MODE | SPI_ENABLE;
 2ac:	83 e5       	ldi	r24, 0x53	; 83
 2ae:	8d b9       	out	0x0d, r24	; 13
 2b0:	08 95       	ret

000002b2 <SPI_sendChar>:
}
void SPI_sendChar(uint8_t character)
{
	SPDR = character;
 2b2:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPSR,7) == 0);
 2b4:	77 9b       	sbis	0x0e, 7	; 14
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <SPI_sendChar+0x2>
}
 2b8:	08 95       	ret

000002ba <SPI_SendStr>:
{
	while(GET_BIT(SPSR,7) == 0);
	return SPDR;
}
void SPI_SendStr(uint8_t* str)
{
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	ec 01       	movw	r28, r24
	uint8_t index = 0;
	while (str[index] != '\0')
 2c2:	88 81       	ld	r24, Y
 2c4:	88 23       	and	r24, r24
 2c6:	51 f0       	breq	.+20     	; 0x2dc <SPI_SendStr+0x22>
	while(GET_BIT(SPSR,7) == 0);
	return SPDR;
}
void SPI_SendStr(uint8_t* str)
{
	uint8_t index = 0;
 2c8:	10 e0       	ldi	r17, 0x00	; 0
	while (str[index] != '\0')
	{
		SPI_sendChar(str[index]);
 2ca:	0e 94 59 01 	call	0x2b2	; 0x2b2 <SPI_sendChar>
		index++;
 2ce:	1f 5f       	subi	r17, 0xFF	; 255
	return SPDR;
}
void SPI_SendStr(uint8_t* str)
{
	uint8_t index = 0;
	while (str[index] != '\0')
 2d0:	fe 01       	movw	r30, r28
 2d2:	e1 0f       	add	r30, r17
 2d4:	f1 1d       	adc	r31, r1
 2d6:	80 81       	ld	r24, Z
 2d8:	81 11       	cpse	r24, r1
 2da:	f7 cf       	rjmp	.-18     	; 0x2ca <SPI_SendStr+0x10>
	{
		SPI_sendChar(str[index]);
		index++;
	}
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	08 95       	ret

000002e4 <main>:
#define MAX_SIZE  5
uint8_t buffer[MAX_SIZE] ;

int main(void)
{
	SPI_Init();
 2e4:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Init>
	UART_Init(BR_9600,_1_stopbit,disabled,Asynchronous,_8_bits,polling);
 2e8:	e1 2c       	mov	r14, r1
 2ea:	06 e0       	ldi	r16, 0x06	; 6
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	86 e0       	ldi	r24, 0x06	; 6
 2f4:	0e 94 98 01 	call	0x330	; 0x330 <UART_Init>
	/* init buffer */
	for (uint16_t counter=0; counter<=MAX_SIZE; counter++)
	{
		buffer[counter] = '\0';
 2f8:	10 92 74 00 	sts	0x0074, r1
 2fc:	10 92 75 00 	sts	0x0075, r1
 300:	10 92 76 00 	sts	0x0076, r1
 304:	10 92 77 00 	sts	0x0077, r1
 308:	10 92 78 00 	sts	0x0078, r1
 30c:	10 92 79 00 	sts	0x0079, r1
	}
    while(1)
    {
        UART_ReceiveString(buffer);
 310:	84 e7       	ldi	r24, 0x74	; 116
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 c4 01 	call	0x388	; 0x388 <UART_ReceiveString>
		SPI_SendStr(buffer);
 318:	84 e7       	ldi	r24, 0x74	; 116
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SPI_SendStr>
		SPI_sendChar('\0'); // indicator for the end of str
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 59 01 	call	0x2b2	; 0x2b2 <SPI_sendChar>
		UART_SendString((uint8_t*)"\rSent Successfully\r");
 326:	80 e6       	ldi	r24, 0x60	; 96
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 b1 01 	call	0x362	; 0x362 <UART_SendString>
 32e:	f0 cf       	rjmp	.-32     	; 0x310 <main+0x2c>

00000330 <UART_Init>:



void UART_Init(EN_baud_rate BR, EN_stopbit_count SB, EN_parity_mode pm, EN_sync_mode s_mode,
				EN_data_size size, EN_trig_source trig_mode)
{
 330:	ef 92       	push	r14
 332:	0f 93       	push	r16
	UCSRA = (1<<1); // when disable this mode, data corruption ocurrs
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	8b b9       	out	0x0b, r24	; 11
	
	UCSRB = trig_mode ;
 338:	ea b8       	out	0x0a, r14	; 10
	ENABLE_TRANSMITTER();
 33a:	53 9a       	sbi	0x0a, 3	; 10
	ENABLE_RECEIVER();
 33c:	54 9a       	sbi	0x0a, 4	; 10
	
	UCSRC = (1<<7);
 33e:	80 e8       	ldi	r24, 0x80	; 128
 340:	80 bd       	out	0x20, r24	; 32
	UCSRC |= ( SB | pm | s_mode | size );
 342:	80 b5       	in	r24, 0x20	; 32
 344:	08 2b       	or	r16, r24
 346:	20 2b       	or	r18, r16
 348:	42 2b       	or	r20, r18
 34a:	64 2b       	or	r22, r20
 34c:	60 bd       	out	0x20, r22	; 32
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
 34e:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	89 b9       	out	0x09, r24	; 9
	
}
 354:	0f 91       	pop	r16
 356:	ef 90       	pop	r14
 358:	08 95       	ret

0000035a <UART_SendChar>:


void UART_SendChar(uint8_t character)
{
	// wait until UDRE flag is enabled (ready to transmit data)
	while(!GET_BIT(UCSRA,5));
 35a:	5d 9b       	sbis	0x0b, 5	; 11
 35c:	fe cf       	rjmp	.-4      	; 0x35a <UART_SendChar>
	UDR = character;
 35e:	8c b9       	out	0x0c, r24	; 12
 360:	08 95       	ret

00000362 <UART_SendString>:
}


void UART_SendString(uint8_t *data)
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	ec 01       	movw	r28, r24
	uint16_t index = 0;
	while(data[index] != '\0')
 368:	88 81       	ld	r24, Y
 36a:	88 23       	and	r24, r24
 36c:	31 f0       	breq	.+12     	; 0x37a <UART_SendString+0x18>
 36e:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(data[index]);
 370:	0e 94 ad 01 	call	0x35a	; 0x35a <UART_SendChar>


void UART_SendString(uint8_t *data)
{
	uint16_t index = 0;
	while(data[index] != '\0')
 374:	89 91       	ld	r24, Y+
 376:	81 11       	cpse	r24, r1
 378:	fb cf       	rjmp	.-10     	; 0x370 <UART_SendString+0xe>
	{
		UART_SendChar(data[index]);
		index++;
	}
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <UART_ReceiveCharSych>:
	*receive_buffer = UDR;
}

uint8_t UART_ReceiveCharSych(void)
{
	while(!GET_BIT(UCSRA,7));
 380:	5f 9b       	sbis	0x0b, 7	; 11
 382:	fe cf       	rjmp	.-4      	; 0x380 <UART_ReceiveCharSych>
	return UDR;
 384:	8c b1       	in	r24, 0x0c	; 12
}
 386:	08 95       	ret

00000388 <UART_ReceiveString>:
	}
}


void UART_ReceiveString(uint8_t *receive_buffer)
{
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
	uint8_t index = 0;
 394:	f1 2c       	mov	r15, r1
	do 
	{
		receive_buffer[index] = UART_ReceiveCharSych();
 396:	8e 01       	movw	r16, r28
 398:	0f 0d       	add	r16, r15
 39a:	11 1d       	adc	r17, r1
 39c:	0e 94 c0 01 	call	0x380	; 0x380 <UART_ReceiveCharSych>
 3a0:	f8 01       	movw	r30, r16
 3a2:	80 83       	st	Z, r24
		index++;
 3a4:	f3 94       	inc	r15
	} while (receive_buffer[index-1] != '\r');
 3a6:	ef 2d       	mov	r30, r15
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	ec 0f       	add	r30, r28
 3ae:	fd 1f       	adc	r31, r29
 3b0:	80 81       	ld	r24, Z
 3b2:	8d 30       	cpi	r24, 0x0D	; 13
 3b4:	81 f7       	brne	.-32     	; 0x396 <UART_ReceiveString+0xe>
	receive_buffer[index-1] = '\0';
 3b6:	10 82       	st	Z, r1
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	ff 90       	pop	r15
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
