
Guessing_GameV02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ab2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  00000ab2  00000b46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000d4  008000d4  00000bba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00000bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019de  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c2  00000000  00000000  00002790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067a  00000000  00000000  00002f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000368  00000000  00000000  000035cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000598  00000000  00000000  00003934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ef3  00000000  00000000  00003ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00004dbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3d       	cpi	r26, 0xD4	; 212
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ed       	ldi	r26, 0xD4	; 212
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3d       	cpi	r26, 0xDC	; 220
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 34 04 	call	0x868	; 0x868 <main>
  8a:	0c 94 57 05 	jmp	0xaae	; 0xaae <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:



void App_init(void)
{
	LCD_Init();
  92:	0e 94 93 03 	call	0x726	; 0x726 <LCD_Init>
	Keypad_Init();
  96:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Keypad_Init>
  9a:	08 95       	ret

0000009c <App_CreateRandNum>:
}

void App_CreateRandNum(void)
{
	random_var = rand();
  9c:	0e 94 ef 04 	call	0x9de	; 0x9de <rand>
	random_var = random_var%15;
  a0:	99 e8       	ldi	r25, 0x89	; 137
  a2:	89 9f       	mul	r24, r25
  a4:	91 2d       	mov	r25, r1
  a6:	11 24       	eor	r1, r1
  a8:	96 95       	lsr	r25
  aa:	96 95       	lsr	r25
  ac:	96 95       	lsr	r25
  ae:	29 2f       	mov	r18, r25
  b0:	22 0f       	add	r18, r18
  b2:	92 0f       	add	r25, r18
  b4:	29 2f       	mov	r18, r25
  b6:	22 0f       	add	r18, r18
  b8:	22 0f       	add	r18, r18
  ba:	92 0f       	add	r25, r18
  bc:	89 1b       	sub	r24, r25
	if (random_var == 0)
  be:	19 f0       	breq	.+6      	; 0xc6 <App_CreateRandNum+0x2a>
}

void App_CreateRandNum(void)
{
	random_var = rand();
	random_var = random_var%15;
  c0:	80 93 db 00 	sts	0x00DB, r24
  c4:	08 95       	ret
	if (random_var == 0)
	{
		random_var = 1;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 db 00 	sts	0x00DB, r24
  cc:	08 95       	ret

000000ce <App_ValidateInput>:



void App_ValidateInput(void)
{
	user_num = atoi(user_input);
  ce:	88 ed       	ldi	r24, 0xD8	; 216
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <atoi>
  d6:	80 93 d7 00 	sts	0x00D7, r24
	// loop until insert valid data
	while(1) {
		if (user_num < 1)
  da:	80 91 d7 00 	lds	r24, 0x00D7
  de:	81 11       	cpse	r24, r1
  e0:	16 c0       	rjmp	.+44     	; 0x10e <App_ValidateInput+0x40>
		{
			LCD_SendCommand(CLEAR_SCREEN);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
			LCD_DisplayString((uint8_t*)"You Didn't choose a number",1);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	84 e7       	ldi	r24, 0x74	; 116
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_DisplayString>
			// delay one second
			Delay_ms_independent(250);
  f2:	8a ef       	ldi	r24, 0xFA	; 250
  f4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
			LCD_SendCommand(CLEAR_SCREEN);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
			LCD_DisplayString((uint8_t*)"Please Guess the Number:",1);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	8f e8       	ldi	r24, 0x8F	; 143
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_DisplayString>
			App_TakeUserInput();
 108:	0e 94 a9 00 	call	0x152	; 0x152 <App_TakeUserInput>
 10c:	e6 cf       	rjmp	.-52     	; 0xda <App_ValidateInput+0xc>
		}
		else if (user_num > 15)
 10e:	80 31       	cpi	r24, 0x10	; 16
 110:	f8 f0       	brcs	.+62     	; 0x150 <App_ValidateInput+0x82>
		{
			LCD_SendCommand(CLEAR_SCREEN);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
			LCD_DisplayString((uint8_t*)"The valid range is 1 to 15",1);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	88 ea       	ldi	r24, 0xA8	; 168
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_DisplayString>
			// delay one second
			Delay_ms_independent(250); Delay_ms_independent(250); Delay_ms_independent(250);
 122:	8a ef       	ldi	r24, 0xFA	; 250
 124:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
 128:	8a ef       	ldi	r24, 0xFA	; 250
 12a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
 12e:	8a ef       	ldi	r24, 0xFA	; 250
 130:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
			Delay_ms_independent(250);
 134:	8a ef       	ldi	r24, 0xFA	; 250
 136:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
			LCD_SendCommand(CLEAR_SCREEN);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
			LCD_DisplayString((uint8_t*)"Please Guess the Number:",1);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	8f e8       	ldi	r24, 0x8F	; 143
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_DisplayString>
			App_TakeUserInput();
 14a:	0e 94 a9 00 	call	0x152	; 0x152 <App_TakeUserInput>
 14e:	c5 cf       	rjmp	.-118    	; 0xda <App_ValidateInput+0xc>
 150:	08 95       	ret

00000152 <App_TakeUserInput>:
		random_var = 1;
	}
}

void App_TakeUserInput(void)
{
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
	uint8_t button_state = 0; // not pressed
	uint8_t previous_state = 0; // not pressed
	// init
	user_input[0] = 0;
 158:	10 92 d8 00 	sts	0x00D8, r1
	user_input[1] = 0;
 15c:	10 92 d9 00 	sts	0x00D9, r1
	user_input[2] = 0;
 160:	10 92 da 00 	sts	0x00DA, r1
	int index = 0;
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
}

void App_TakeUserInput(void)
{
	uint8_t button_state = 0; // not pressed
	uint8_t previous_state = 0; // not pressed
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	01 c0       	rjmp	.+2      	; 0x16e <App_TakeUserInput+0x1c>
			 previous_state = button_state;
			 index++;
		 }
		 else
		 {
			 previous_state = button_state;
 16c:	18 2f       	mov	r17, r24
	user_input[1] = 0;
	user_input[2] = 0;
	int index = 0;
	while (1)
	{
		 button_state = Keypad_ReadPressedButton();
 16e:	0e 94 af 02 	call	0x55e	; 0x55e <Keypad_ReadPressedButton>
		 if(button_state == previous_state){
 172:	81 17       	cp	r24, r17
 174:	e1 f3       	breq	.-8      	; 0x16e <App_TakeUserInput+0x1c>
			 continue;
		 }
		 else if (button_state != 0)
 176:	88 23       	and	r24, r24
 178:	c9 f3       	breq	.-14     	; 0x16c <App_TakeUserInput+0x1a>
		 {
			 // end of input
			 if (button_state == '=')
 17a:	8d 33       	cpi	r24, 0x3D	; 61
 17c:	19 f4       	brne	.+6      	; 0x184 <App_TakeUserInput+0x32>
			 {
				 App_ValidateInput();
 17e:	0e 94 67 00 	call	0xce	; 0xce <App_ValidateInput>
 182:	07 c0       	rjmp	.+14     	; 0x192 <App_TakeUserInput+0x40>
				 return;
			 }
			 user_input[index] = button_state;
 184:	fe 01       	movw	r30, r28
 186:	e8 52       	subi	r30, 0x28	; 40
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	80 83       	st	Z, r24
			 previous_state = button_state;
			 index++;
 18c:	21 96       	adiw	r28, 0x01	; 1
			 {
				 App_ValidateInput();
				 return;
			 }
			 user_input[index] = button_state;
			 previous_state = button_state;
 18e:	18 2f       	mov	r17, r24
 190:	ee cf       	rjmp	.-36     	; 0x16e <App_TakeUserInput+0x1c>
		 else
		 {
			 previous_state = button_state;
		 }
	}
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	1f 91       	pop	r17
 198:	08 95       	ret

0000019a <App_PrintResult>:
	}
}

void App_PrintResult(void)
{
	if (random_var == user_num)
 19a:	90 91 db 00 	lds	r25, 0x00DB
 19e:	80 91 d7 00 	lds	r24, 0x00D7
 1a2:	98 13       	cpse	r25, r24
 1a4:	09 c0       	rjmp	.+18     	; 0x1b8 <App_PrintResult+0x1e>
	{
		LCD_SendCommand(CLEAR_SCREEN);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
		LCD_DisplayString((uint8_t*)"You Won",1);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	83 ec       	ldi	r24, 0xC3	; 195
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_DisplayString>
 1b6:	08 c0       	rjmp	.+16     	; 0x1c8 <App_PrintResult+0x2e>
	}
	else
	{
		LCD_SendCommand(CLEAR_SCREEN);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
		LCD_DisplayString((uint8_t*)"You Lost",1);
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	8b ec       	ldi	r24, 0xCB	; 203
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_DisplayString>
	}
	Delay_ms_independent(250);
 1c8:	8a ef       	ldi	r24, 0xFA	; 250
 1ca:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	Delay_ms_independent(250);
 1ce:	8a ef       	ldi	r24, 0xFA	; 250
 1d0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	Delay_ms_independent(250);
 1d4:	8a ef       	ldi	r24, 0xFA	; 250
 1d6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	Delay_ms_independent(250);
 1da:	8a ef       	ldi	r24, 0xFA	; 250
 1dc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
 1e0:	08 95       	ret

000001e2 <App_promptUser>:
}

void App_promptUser(uint8_t *str)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
	LCD_SendCommand(CLEAR_SCREEN);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
	LCD_DisplayString(str,1);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_DisplayString>
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <Delay_ms_independent>:
}

void Delay_ms_independent(uint8_t time_ms)
{
	uint32_t num_of_ticks = time_ms;
	num_of_ticks = num_of_ticks*1000/3;
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	a8 ee       	ldi	r26, 0xE8	; 232
 202:	b3 e0       	ldi	r27, 0x03	; 3
 204:	0e 94 92 04 	call	0x924	; 0x924 <__umulhisi3>
 208:	23 e0       	ldi	r18, 0x03	; 3
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__udivmodsi4>
	while (num_of_ticks)
 214:	21 15       	cp	r18, r1
 216:	31 05       	cpc	r19, r1
 218:	41 05       	cpc	r20, r1
 21a:	51 05       	cpc	r21, r1
 21c:	49 f0       	breq	.+18     	; 0x230 <Delay_ms_independent+0x34>
	{
		num_of_ticks--;
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	31 09       	sbc	r19, r1
 222:	41 09       	sbc	r20, r1
 224:	51 09       	sbc	r21, r1

void Delay_ms_independent(uint8_t time_ms)
{
	uint32_t num_of_ticks = time_ms;
	num_of_ticks = num_of_ticks*1000/3;
	while (num_of_ticks)
 226:	21 15       	cp	r18, r1
 228:	31 05       	cpc	r19, r1
 22a:	41 05       	cpc	r20, r1
 22c:	51 05       	cpc	r21, r1
 22e:	b9 f7       	brne	.-18     	; 0x21e <Delay_ms_independent+0x22>
 230:	08 95       	ret

00000232 <DIO_setPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"

sint8_t DIO_setPinDirection(uint8_t GPIO, uint8_t pin_number, uint8_t direction)
{
	switch (GPIO)
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	c9 f0       	breq	.+50     	; 0x268 <DIO_setPinDirection+0x36>
 236:	28 f0       	brcs	.+10     	; 0x242 <DIO_setPinDirection+0x10>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	39 f1       	breq	.+78     	; 0x28a <DIO_setPinDirection+0x58>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	b1 f1       	breq	.+108    	; 0x2ac <DIO_setPinDirection+0x7a>
 240:	46 c0       	rjmp	.+140    	; 0x2ce <DIO_setPinDirection+0x9c>
	{
		case GPIOA:
			if (pin_number < 7) 
 242:	67 30       	cpi	r22, 0x07	; 7
 244:	08 f0       	brcs	.+2      	; 0x248 <DIO_setPinDirection+0x16>
 246:	45 c0       	rjmp	.+138    	; 0x2d2 <DIO_setPinDirection+0xa0>
			{
				if (direction <= 1)
 248:	42 30       	cpi	r20, 0x02	; 2
 24a:	08 f0       	brcs	.+2      	; 0x24e <DIO_setPinDirection+0x1c>
 24c:	44 c0       	rjmp	.+136    	; 0x2d6 <DIO_setPinDirection+0xa4>
				{
					PORTA_DDR |= (direction<< pin_number);
 24e:	8a b3       	in	r24, 0x1a	; 26
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	9a 01       	movw	r18, r20
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_setPinDirection+0x28>
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_setPinDirection+0x24>
 25e:	b9 01       	movw	r22, r18
 260:	68 2b       	or	r22, r24
 262:	6a bb       	out	0x1a, r22	; 26
					return NO_ERRORS; // no errors
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
		return PIN_NUMBER_OUT_OF_RANGE; 
		
		case GPIOB:
			if (pin_number < 7)
 268:	67 30       	cpi	r22, 0x07	; 7
 26a:	b8 f5       	brcc	.+110    	; 0x2da <DIO_setPinDirection+0xa8>
			{
				if (direction <= 1)
 26c:	42 30       	cpi	r20, 0x02	; 2
 26e:	b8 f5       	brcc	.+110    	; 0x2de <DIO_setPinDirection+0xac>
				{
					PORTB_DDR |= (direction<< pin_number);
 270:	87 b3       	in	r24, 0x17	; 23
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	9a 01       	movw	r18, r20
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_setPinDirection+0x4a>
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_setPinDirection+0x46>
 280:	b9 01       	movw	r22, r18
 282:	68 2b       	or	r22, r24
 284:	67 bb       	out	0x17, r22	; 23
					return NO_ERRORS; // no errors
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
		
		case GPIOC:
			if (pin_number < 7)
 28a:	67 30       	cpi	r22, 0x07	; 7
 28c:	50 f5       	brcc	.+84     	; 0x2e2 <DIO_setPinDirection+0xb0>
			{
				if (direction <= 1)
 28e:	42 30       	cpi	r20, 0x02	; 2
 290:	50 f5       	brcc	.+84     	; 0x2e6 <DIO_setPinDirection+0xb4>
				{
					PORTC_DDR |= (direction<< pin_number);
 292:	84 b3       	in	r24, 0x14	; 20
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	9a 01       	movw	r18, r20
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_setPinDirection+0x6c>
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_setPinDirection+0x68>
 2a2:	b9 01       	movw	r22, r18
 2a4:	68 2b       	or	r22, r24
 2a6:	64 bb       	out	0x14, r22	; 20
					return NO_ERRORS; // no errors
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
		
		case GPIOD:
		if (pin_number < 7)
 2ac:	67 30       	cpi	r22, 0x07	; 7
 2ae:	e8 f4       	brcc	.+58     	; 0x2ea <DIO_setPinDirection+0xb8>
		{
			if (direction <= 1)
 2b0:	42 30       	cpi	r20, 0x02	; 2
 2b2:	e8 f4       	brcc	.+58     	; 0x2ee <DIO_setPinDirection+0xbc>
			{
				PORTD_DDR |= (direction<< pin_number);
 2b4:	81 b3       	in	r24, 0x11	; 17
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	9a 01       	movw	r18, r20
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_setPinDirection+0x8e>
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_setPinDirection+0x8a>
 2c4:	b9 01       	movw	r22, r18
 2c6:	68 2b       	or	r22, r24
 2c8:	61 bb       	out	0x11, r22	; 17
				return NO_ERRORS; // no errors
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	08 95       	ret
			return INVALID_PIN_DIRECTION;
		}
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
			

	default: return INVALID_PORT_ID; // GPIO Id isn't defined
 2ce:	8d ef       	ldi	r24, 0xFD	; 253
 2d0:	08 95       	ret
					PORTA_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
		return PIN_NUMBER_OUT_OF_RANGE; 
 2d2:	8e ef       	ldi	r24, 0xFE	; 254
 2d4:	08 95       	ret
				if (direction <= 1)
				{
					PORTA_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	08 95       	ret
					PORTB_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
 2da:	8e ef       	ldi	r24, 0xFE	; 254
 2dc:	08 95       	ret
				if (direction <= 1)
				{
					PORTB_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	08 95       	ret
					PORTC_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
 2e2:	8e ef       	ldi	r24, 0xFE	; 254
 2e4:	08 95       	ret
				if (direction <= 1)
				{
					PORTC_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	08 95       	ret
				PORTD_DDR |= (direction<< pin_number);
				return NO_ERRORS; // no errors
			}
			return INVALID_PIN_DIRECTION;
		}
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
 2ea:	8e ef       	ldi	r24, 0xFE	; 254
 2ec:	08 95       	ret
			if (direction <= 1)
			{
				PORTD_DDR |= (direction<< pin_number);
				return NO_ERRORS; // no errors
			}
			return INVALID_PIN_DIRECTION;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
			

	default: return INVALID_PORT_ID; // GPIO Id isn't defined
	}
}
 2f0:	08 95       	ret

000002f2 <DIO_setPinValue>:



sint8_t DIO_setPinValue(uint8_t GPIO, uint8_t pin_number, uint8_t value)
{
	switch (GPIO)
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	41 f1       	breq	.+80     	; 0x346 <DIO_setPinValue+0x54>
 2f6:	38 f0       	brcs	.+14     	; 0x306 <DIO_setPinValue+0x14>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	09 f4       	brne	.+2      	; 0x2fe <DIO_setPinValue+0xc>
 2fc:	44 c0       	rjmp	.+136    	; 0x386 <DIO_setPinValue+0x94>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	09 f4       	brne	.+2      	; 0x304 <DIO_setPinValue+0x12>
 302:	61 c0       	rjmp	.+194    	; 0x3c6 <DIO_setPinValue+0xd4>
 304:	7f c0       	rjmp	.+254    	; 0x404 <DIO_setPinValue+0x112>
	{
		case GPIOA:
		if (pin_number < 7)
 306:	67 30       	cpi	r22, 0x07	; 7
 308:	08 f0       	brcs	.+2      	; 0x30c <DIO_setPinValue+0x1a>
 30a:	7e c0       	rjmp	.+252    	; 0x408 <DIO_setPinValue+0x116>
		{
			if (GET_BIT(value, 0) == LOW)
 30c:	40 fd       	sbrc	r20, 0
 30e:	0e c0       	rjmp	.+28     	; 0x32c <DIO_setPinValue+0x3a>
			{
				CLR_BIT(PORTA_DATA, pin_number);
 310:	2b b3       	in	r18, 0x1b	; 27
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	ac 01       	movw	r20, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_setPinValue+0x2c>
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_setPinValue+0x28>
 322:	ba 01       	movw	r22, r20
 324:	60 95       	com	r22
 326:	62 23       	and	r22, r18
 328:	6b bb       	out	0x1b, r22	; 27
 32a:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTA_DATA, pin_number);
 32c:	2b b3       	in	r18, 0x1b	; 27
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	ac 01       	movw	r20, r24
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_setPinValue+0x48>
 336:	44 0f       	add	r20, r20
 338:	55 1f       	adc	r21, r21
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_setPinValue+0x44>
 33e:	ba 01       	movw	r22, r20
 340:	62 2b       	or	r22, r18
 342:	6b bb       	out	0x1b, r22	; 27
 344:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error


		case GPIOB:
		if (pin_number < 7)
 346:	67 30       	cpi	r22, 0x07	; 7
 348:	08 f0       	brcs	.+2      	; 0x34c <DIO_setPinValue+0x5a>
 34a:	60 c0       	rjmp	.+192    	; 0x40c <DIO_setPinValue+0x11a>
		{
			if (GET_BIT(value, 0) == LOW)
 34c:	40 fd       	sbrc	r20, 0
 34e:	0e c0       	rjmp	.+28     	; 0x36c <DIO_setPinValue+0x7a>
			{
				CLR_BIT(PORTB_DATA, pin_number);
 350:	28 b3       	in	r18, 0x18	; 24
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	ac 01       	movw	r20, r24
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_setPinValue+0x6c>
 35a:	44 0f       	add	r20, r20
 35c:	55 1f       	adc	r21, r21
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_setPinValue+0x68>
 362:	ba 01       	movw	r22, r20
 364:	60 95       	com	r22
 366:	62 23       	and	r22, r18
 368:	68 bb       	out	0x18, r22	; 24
 36a:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTB_DATA, pin_number);
 36c:	28 b3       	in	r18, 0x18	; 24
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	ac 01       	movw	r20, r24
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_setPinValue+0x88>
 376:	44 0f       	add	r20, r20
 378:	55 1f       	adc	r21, r21
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_setPinValue+0x84>
 37e:	ba 01       	movw	r22, r20
 380:	62 2b       	or	r22, r18
 382:	68 bb       	out	0x18, r22	; 24
 384:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error

		
		case GPIOC:
		if (pin_number < 7)
 386:	67 30       	cpi	r22, 0x07	; 7
 388:	08 f0       	brcs	.+2      	; 0x38c <DIO_setPinValue+0x9a>
 38a:	42 c0       	rjmp	.+132    	; 0x410 <DIO_setPinValue+0x11e>
		{
			if (GET_BIT(value, 0) == LOW)
 38c:	40 fd       	sbrc	r20, 0
 38e:	0e c0       	rjmp	.+28     	; 0x3ac <DIO_setPinValue+0xba>
			{
				CLR_BIT(PORTC_DATA, pin_number);
 390:	25 b3       	in	r18, 0x15	; 21
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	ac 01       	movw	r20, r24
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_setPinValue+0xac>
 39a:	44 0f       	add	r20, r20
 39c:	55 1f       	adc	r21, r21
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_setPinValue+0xa8>
 3a2:	ba 01       	movw	r22, r20
 3a4:	60 95       	com	r22
 3a6:	62 23       	and	r22, r18
 3a8:	65 bb       	out	0x15, r22	; 21
 3aa:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTC_DATA, pin_number);
 3ac:	25 b3       	in	r18, 0x15	; 21
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	ac 01       	movw	r20, r24
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_setPinValue+0xc8>
 3b6:	44 0f       	add	r20, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_setPinValue+0xc4>
 3be:	ba 01       	movw	r22, r20
 3c0:	62 2b       	or	r22, r18
 3c2:	65 bb       	out	0x15, r22	; 21
 3c4:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error

		
		case GPIOD:
		if (pin_number < 7)
 3c6:	67 30       	cpi	r22, 0x07	; 7
 3c8:	28 f5       	brcc	.+74     	; 0x414 <DIO_setPinValue+0x122>
		{
			if (GET_BIT(value, 0) == LOW)
 3ca:	40 fd       	sbrc	r20, 0
 3cc:	0e c0       	rjmp	.+28     	; 0x3ea <DIO_setPinValue+0xf8>
			{
				CLR_BIT(PORTD_DATA, pin_number);
 3ce:	22 b3       	in	r18, 0x12	; 18
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	ac 01       	movw	r20, r24
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_setPinValue+0xea>
 3d8:	44 0f       	add	r20, r20
 3da:	55 1f       	adc	r21, r21
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_setPinValue+0xe6>
 3e0:	ba 01       	movw	r22, r20
 3e2:	60 95       	com	r22
 3e4:	62 23       	and	r22, r18
 3e6:	62 bb       	out	0x12, r22	; 18
 3e8:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTD_DATA, pin_number);
 3ea:	22 b3       	in	r18, 0x12	; 18
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	ac 01       	movw	r20, r24
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_setPinValue+0x106>
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_setPinValue+0x102>
 3fc:	ba 01       	movw	r22, r20
 3fe:	62 2b       	or	r22, r18
 400:	62 bb       	out	0x12, r22	; 18
 402:	08 95       	ret
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error


		default: return INVALID_PORT_ID; // GPIO Id isn't defined
 404:	8d ef       	ldi	r24, 0xFD	; 253
 406:	08 95       	ret
			{
				SET_BIT(PORTA_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 408:	8e ef       	ldi	r24, 0xFE	; 254
 40a:	08 95       	ret
			{
				SET_BIT(PORTB_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 40c:	8e ef       	ldi	r24, 0xFE	; 254
 40e:	08 95       	ret
			{
				SET_BIT(PORTC_DATA, pin_number);
			}
			return NO_ERRORS; 
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 410:	8e ef       	ldi	r24, 0xFE	; 254
 412:	08 95       	ret
			{
				SET_BIT(PORTD_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 414:	8e ef       	ldi	r24, 0xFE	; 254


		default: return INVALID_PORT_ID; // GPIO Id isn't defined
	}
}
 416:	08 95       	ret

00000418 <DIO_readPinValue>:



uint8_t DIO_readPinValue(uint8_t GPIO, uint8_t pin_number)
{
	switch (GPIO)
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	91 f0       	breq	.+36     	; 0x440 <DIO_readPinValue+0x28>
 41c:	28 f0       	brcs	.+10     	; 0x428 <DIO_readPinValue+0x10>
 41e:	82 30       	cpi	r24, 0x02	; 2
 420:	d9 f0       	breq	.+54     	; 0x458 <DIO_readPinValue+0x40>
 422:	83 30       	cpi	r24, 0x03	; 3
 424:	29 f1       	breq	.+74     	; 0x470 <DIO_readPinValue+0x58>
 426:	30 c0       	rjmp	.+96     	; 0x488 <DIO_readPinValue+0x70>
	{
		case GPIOA:
			if (pin_number < 8) 
 428:	68 30       	cpi	r22, 0x08	; 8
 42a:	80 f5       	brcc	.+96     	; 0x48c <DIO_readPinValue+0x74>
			{
				// return the value
				return GET_BIT(PORTA_PIN, pin_number); // no errors
 42c:	29 b3       	in	r18, 0x19	; 25
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	c9 01       	movw	r24, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_readPinValue+0x20>
 434:	95 95       	asr	r25
 436:	87 95       	ror	r24
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_readPinValue+0x1c>
 43c:	81 70       	andi	r24, 0x01	; 1
 43e:	08 95       	ret
			}
		return PIN_NUMBER_OUT_OF_RANGE; // Error

		case GPIOB:
			if (pin_number < 8) 
 440:	68 30       	cpi	r22, 0x08	; 8
 442:	30 f5       	brcc	.+76     	; 0x490 <DIO_readPinValue+0x78>
			{
				return GET_BIT(PORTB_PIN, pin_number); // no errors
 444:	26 b3       	in	r18, 0x16	; 22
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	c9 01       	movw	r24, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_readPinValue+0x38>
 44c:	95 95       	asr	r25
 44e:	87 95       	ror	r24
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_readPinValue+0x34>
 454:	81 70       	andi	r24, 0x01	; 1
 456:	08 95       	ret
			}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
		
		case GPIOC:
			if (pin_number < 8) 
 458:	68 30       	cpi	r22, 0x08	; 8
 45a:	e0 f4       	brcc	.+56     	; 0x494 <DIO_readPinValue+0x7c>
				{
					return GET_BIT(PORTC_PIN, pin_number); // no errors
 45c:	23 b3       	in	r18, 0x13	; 19
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	c9 01       	movw	r24, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_readPinValue+0x50>
 464:	95 95       	asr	r25
 466:	87 95       	ror	r24
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_readPinValue+0x4c>
 46c:	81 70       	andi	r24, 0x01	; 1
 46e:	08 95       	ret
				}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
		
		case GPIOD:
		if (pin_number < 8) 
 470:	68 30       	cpi	r22, 0x08	; 8
 472:	90 f4       	brcc	.+36     	; 0x498 <DIO_readPinValue+0x80>
				{
					return GET_BIT(PORTD_PIN, pin_number); // no errors
 474:	20 b3       	in	r18, 0x10	; 16
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	c9 01       	movw	r24, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_readPinValue+0x68>
 47c:	95 95       	asr	r25
 47e:	87 95       	ror	r24
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_readPinValue+0x64>
 484:	81 70       	andi	r24, 0x01	; 1
 486:	08 95       	ret
				}
		return PIN_NUMBER_OUT_OF_RANGE; // Error

	default: return INVALID_PORT_ID; // GPIO Id isn't defined
 488:	8d ef       	ldi	r24, 0xFD	; 253
 48a:	08 95       	ret
			if (pin_number < 8) 
			{
				// return the value
				return GET_BIT(PORTA_PIN, pin_number); // no errors
			}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 48c:	8e ef       	ldi	r24, 0xFE	; 254
 48e:	08 95       	ret
		case GPIOB:
			if (pin_number < 8) 
			{
				return GET_BIT(PORTB_PIN, pin_number); // no errors
			}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 490:	8e ef       	ldi	r24, 0xFE	; 254
 492:	08 95       	ret
		case GPIOC:
			if (pin_number < 8) 
				{
					return GET_BIT(PORTC_PIN, pin_number); // no errors
				}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 494:	8e ef       	ldi	r24, 0xFE	; 254
 496:	08 95       	ret
		case GPIOD:
		if (pin_number < 8) 
				{
					return GET_BIT(PORTD_PIN, pin_number); // no errors
				}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 498:	8e ef       	ldi	r24, 0xFE	; 254

	default: return INVALID_PORT_ID; // GPIO Id isn't defined
	}
}
 49a:	08 95       	ret

0000049c <DIO_SetPortValue>:
	}
	return value ;
}

void DIO_SetPortValue (uint8_t PortNumber , uint8_t Value) {
	switch(PortNumber) {
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	41 f0       	breq	.+16     	; 0x4b0 <DIO_SetPortValue+0x14>
 4a0:	28 f0       	brcs	.+10     	; 0x4ac <DIO_SetPortValue+0x10>
 4a2:	82 30       	cpi	r24, 0x02	; 2
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_SetPortValue+0x18>
 4a6:	83 30       	cpi	r24, 0x03	; 3
 4a8:	39 f0       	breq	.+14     	; 0x4b8 <DIO_SetPortValue+0x1c>
 4aa:	08 95       	ret
		case GPIOA :
		PORTA_DATA = Value ;
 4ac:	6b bb       	out	0x1b, r22	; 27
		break;
 4ae:	08 95       	ret
		
		case GPIOB :
		PORTB_DATA = Value ;
 4b0:	68 bb       	out	0x18, r22	; 24
		break;
 4b2:	08 95       	ret
		
		case GPIOC :
		PORTC_DATA = Value ;
 4b4:	65 bb       	out	0x15, r22	; 21
		break;
 4b6:	08 95       	ret
		
		case GPIOD :
		PORTD_DATA = Value ;
 4b8:	62 bb       	out	0x12, r22	; 18
 4ba:	08 95       	ret

000004bc <Keypad_Init>:
 * EX: Keypad_Init();
 */
void Keypad_Init(void)
{
	// set direction of row pins (output)
	DIO_setPinDirection(ROW0, 1);
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	DIO_setPinDirection(ROW1, 1);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	DIO_setPinDirection(ROW2, 1);
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	62 e0       	ldi	r22, 0x02	; 2
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	DIO_setPinDirection(ROW3, 1);
 4da:	41 e0       	ldi	r20, 0x01	; 1
 4dc:	63 e0       	ldi	r22, 0x03	; 3
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	// set direction of col pins (input with pullup enabled)
	DIO_setPinDirection(COL0, 0);
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	64 e0       	ldi	r22, 0x04	; 4
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	DIO_setPinDirection(COL1, 0);
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	65 e0       	ldi	r22, 0x05	; 5
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	DIO_setPinDirection(COL2, 0);
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	66 e0       	ldi	r22, 0x06	; 6
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	DIO_setPinDirection(COL3, 0);
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	67 e0       	ldi	r22, 0x07	; 7
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	// set value to col pins (High)
	DIO_setPinValue(COL0,1);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	64 e0       	ldi	r22, 0x04	; 4
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	DIO_setPinValue(COL1,1);
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	65 e0       	ldi	r22, 0x05	; 5
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	DIO_setPinValue(COL2,1);
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	66 e0       	ldi	r22, 0x06	; 6
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	DIO_setPinValue(COL3,1);
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	67 e0       	ldi	r22, 0x07	; 7
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	
	// set value to row pins (Low)
	DIO_setPinValue(ROW0,0);
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	DIO_setPinValue(ROW1,0);
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	DIO_setPinValue(ROW2,0);
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	62 e0       	ldi	r22, 0x02	; 2
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	DIO_setPinValue(ROW3,0);
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	63 e0       	ldi	r22, 0x03	; 3
 556:	82 e0       	ldi	r24, 0x02	; 2
 558:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
 55c:	08 95       	ret

0000055e <Keypad_ReadPressedButton>:
 * Parameters: none
 * Return: The pressed button (char) 
 * EX: Keypad_ReadPressedButton();  -> '2'
 */
sint8_t Keypad_ReadPressedButton(void)
{
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
	// pressed button indecies  row, col
	sint8_t button_rowID = -1;
	sint8_t button_colID = -1;
	/* loop on raw and each time put on zero to a row */
	for(uint8_t count_rawId=0; count_rawId<NUM_OF_ROW; count_rawId++)
 566:	d0 e0       	ldi	r29, 0x00	; 0
			DIO_setPinValue(ROW2,1);
			DIO_setPinValue(ROW3,1);
			break;
		case 1:
			// write the value 1101 to the rows
			DIO_setPinValue(ROW0,1);
 568:	10 e0       	ldi	r17, 0x00	; 0
 * EX: Keypad_ReadColPin(0) -> 1
 * NOTE: This Function can't be called by the other modules
 */
static sint8_t Keypad_ReadColPin(uint8_t colID)
{
	uint8_t result = 0;
 56a:	01 2f       	mov	r16, r17
 * EX: Keypad_AssignRowValue(3)
 * NOTE: This Function can't be called by the other modules
 */
static void Keypad_AssignRowValue(uint8_t rowID)
{
	switch (rowID)
 56c:	d1 30       	cpi	r29, 0x01	; 1
 56e:	e1 f0       	breq	.+56     	; 0x5a8 <Keypad_ReadPressedButton+0x4a>
 570:	30 f0       	brcs	.+12     	; 0x57e <Keypad_ReadPressedButton+0x20>
 572:	d2 30       	cpi	r29, 0x02	; 2
 574:	71 f1       	breq	.+92     	; 0x5d2 <Keypad_ReadPressedButton+0x74>
 576:	d3 30       	cpi	r29, 0x03	; 3
 578:	09 f4       	brne	.+2      	; 0x57c <Keypad_ReadPressedButton+0x1e>
 57a:	40 c0       	rjmp	.+128    	; 0x5fc <Keypad_ReadPressedButton+0x9e>
 57c:	8f c0       	rjmp	.+286    	; 0x69c <Keypad_ReadPressedButton+0x13e>
	{
		case 0:
		// write the value 1110 to the rows
			DIO_setPinValue(ROW0,0);
 57e:	41 2f       	mov	r20, r17
 580:	61 2f       	mov	r22, r17
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW1,1);
 588:	41 e0       	ldi	r20, 0x01	; 1
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW2,1);
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	62 e0       	ldi	r22, 0x02	; 2
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW3,1);
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	63 e0       	ldi	r22, 0x03	; 3
 5a0:	82 e0       	ldi	r24, 0x02	; 2
 5a2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
 5a6:	7a c0       	rjmp	.+244    	; 0x69c <Keypad_ReadPressedButton+0x13e>
			break;
		case 1:
			// write the value 1101 to the rows
			DIO_setPinValue(ROW0,1);
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	61 2f       	mov	r22, r17
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW1,0);
 5b2:	41 2f       	mov	r20, r17
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW2,1);
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	62 e0       	ldi	r22, 0x02	; 2
 5c0:	82 e0       	ldi	r24, 0x02	; 2
 5c2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW3,1);
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
 5d0:	65 c0       	rjmp	.+202    	; 0x69c <Keypad_ReadPressedButton+0x13e>
			break;
		case 2:
			// write the value 1011 to the rows
			DIO_setPinValue(ROW0,1);
 5d2:	41 e0       	ldi	r20, 0x01	; 1
 5d4:	61 2f       	mov	r22, r17
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW1,1);
 5dc:	41 e0       	ldi	r20, 0x01	; 1
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW2,0);
 5e6:	41 2f       	mov	r20, r17
 5e8:	62 e0       	ldi	r22, 0x02	; 2
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW3,1);
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	63 e0       	ldi	r22, 0x03	; 3
 5f4:	82 e0       	ldi	r24, 0x02	; 2
 5f6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
 5fa:	50 c0       	rjmp	.+160    	; 0x69c <Keypad_ReadPressedButton+0x13e>
			break;
		case 3:
			// write the value 0111 to the rows
			DIO_setPinValue(ROW0,1);
 5fc:	41 e0       	ldi	r20, 0x01	; 1
 5fe:	61 2f       	mov	r22, r17
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW1,1);
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW2,1);
 610:	41 e0       	ldi	r20, 0x01	; 1
 612:	62 e0       	ldi	r22, 0x02	; 2
 614:	82 e0       	ldi	r24, 0x02	; 2
 616:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
			DIO_setPinValue(ROW3,0);
 61a:	41 2f       	mov	r20, r17
 61c:	63 e0       	ldi	r22, 0x03	; 3
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
 624:	3b c0       	rjmp	.+118    	; 0x69c <Keypad_ReadPressedButton+0x13e>
 * NOTE: This Function can't be called by the other modules
 */
static sint8_t Keypad_ReadColPin(uint8_t colID)
{
	uint8_t result = 0;
	switch (colID)
 626:	c1 30       	cpi	r28, 0x01	; 1
 628:	59 f0       	breq	.+22     	; 0x640 <Keypad_ReadPressedButton+0xe2>
 62a:	28 f0       	brcs	.+10     	; 0x636 <Keypad_ReadPressedButton+0xd8>
 62c:	c2 30       	cpi	r28, 0x02	; 2
 62e:	69 f0       	breq	.+26     	; 0x64a <Keypad_ReadPressedButton+0xec>
 630:	c3 30       	cpi	r28, 0x03	; 3
 632:	81 f0       	breq	.+32     	; 0x654 <Keypad_ReadPressedButton+0xf6>
 634:	14 c0       	rjmp	.+40     	; 0x65e <Keypad_ReadPressedButton+0x100>
	{
		case 0:
			result = DIO_readPinValue(COL0);
 636:	64 e0       	ldi	r22, 0x04	; 4
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_readPinValue>
 63e:	10 c0       	rjmp	.+32     	; 0x660 <Keypad_ReadPressedButton+0x102>
			break;
		case 1:
			result = DIO_readPinValue(COL1);
 640:	65 e0       	ldi	r22, 0x05	; 5
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_readPinValue>
 648:	0b c0       	rjmp	.+22     	; 0x660 <Keypad_ReadPressedButton+0x102>
			break;
		case 2:
			result = DIO_readPinValue(COL2);
 64a:	66 e0       	ldi	r22, 0x06	; 6
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_readPinValue>
 652:	06 c0       	rjmp	.+12     	; 0x660 <Keypad_ReadPressedButton+0x102>
			break;
		case 3:
			result = DIO_readPinValue(COL2);
 654:	66 e0       	ldi	r22, 0x06	; 6
 656:	82 e0       	ldi	r24, 0x02	; 2
 658:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_readPinValue>
 65c:	01 c0       	rjmp	.+2      	; 0x660 <Keypad_ReadPressedButton+0x102>
 * EX: Keypad_ReadColPin(0) -> 1
 * NOTE: This Function can't be called by the other modules
 */
static sint8_t Keypad_ReadColPin(uint8_t colID)
{
	uint8_t result = 0;
 65e:	80 2f       	mov	r24, r16
		for(uint8_t count_colId=0; count_colId<NUM_OF_COL; count_colId++)
		{
			// get the col state (High , low)
			uint8_t col_state = Keypad_ReadColPin(count_colId);
			// if low?
			if (col_state == 0)
 660:	81 11       	cpse	r24, r1
 662:	13 c0       	rjmp	.+38     	; 0x68a <Keypad_ReadPressedButton+0x12c>
 * EX: Keypad_GetPressedButton(0,1) -> '1'
 * NOTE: This Function can't be called by other module
 */
static sint8_t Keypad_GetPressedButton(uint8_t row, uint8_t col)
{
	if(row<4 && col<3)
 664:	d4 30       	cpi	r29, 0x04	; 4
 666:	68 f4       	brcc	.+26     	; 0x682 <Keypad_ReadPressedButton+0x124>
 668:	c3 30       	cpi	r28, 0x03	; 3
 66a:	68 f4       	brcc	.+26     	; 0x686 <Keypad_ReadPressedButton+0x128>
	{
		return buttons[row][col];
 66c:	ec 2f       	mov	r30, r28
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	84 e0       	ldi	r24, 0x04	; 4
 672:	d8 9f       	mul	r29, r24
 674:	e0 0d       	add	r30, r0
 676:	f1 1d       	adc	r31, r1
 678:	11 24       	eor	r1, r1
 67a:	ec 59       	subi	r30, 0x9C	; 156
 67c:	ff 4f       	sbci	r31, 0xFF	; 255
 67e:	80 81       	ld	r24, Z
 680:	0f c0       	rjmp	.+30     	; 0x6a0 <Keypad_ReadPressedButton+0x142>
	}
	return INVALID_INDEX; // ERROR
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	0d c0       	rjmp	.+26     	; 0x6a0 <Keypad_ReadPressedButton+0x142>
 686:	80 e0       	ldi	r24, 0x00	; 0
			{
				// button is detected
				button_rowID = count_rawId;
				button_colID = count_colId;
				sint8_t result = Keypad_GetPressedButton(button_rowID, button_colID);
				return result;
 688:	0b c0       	rjmp	.+22     	; 0x6a0 <Keypad_ReadPressedButton+0x142>
	for(uint8_t count_rawId=0; count_rawId<NUM_OF_ROW; count_rawId++)
	{
		// put value on raw pins
		Keypad_AssignRowValue(count_rawId);
		/* loop on cols to catch the zero value of them (i.e. where is the pressed button) */
		for(uint8_t count_colId=0; count_colId<NUM_OF_COL; count_colId++)
 68a:	cf 5f       	subi	r28, 0xFF	; 255
 68c:	c4 30       	cpi	r28, 0x04	; 4
 68e:	59 f6       	brne	.-106    	; 0x626 <Keypad_ReadPressedButton+0xc8>
{
	// pressed button indecies  row, col
	sint8_t button_rowID = -1;
	sint8_t button_colID = -1;
	/* loop on raw and each time put on zero to a row */
	for(uint8_t count_rawId=0; count_rawId<NUM_OF_ROW; count_rawId++)
 690:	df 5f       	subi	r29, 0xFF	; 255
 692:	d4 30       	cpi	r29, 0x04	; 4
 694:	09 f0       	breq	.+2      	; 0x698 <Keypad_ReadPressedButton+0x13a>
 696:	6a cf       	rjmp	.-300    	; 0x56c <Keypad_ReadPressedButton+0xe>
				sint8_t result = Keypad_GetPressedButton(button_rowID, button_colID);
				return result;
			}
		}
	}
	return NO_PRESSED_BUTTON; 
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <Keypad_ReadPressedButton+0x142>
{
	// pressed button indecies  row, col
	sint8_t button_rowID = -1;
	sint8_t button_colID = -1;
	/* loop on raw and each time put on zero to a row */
	for(uint8_t count_rawId=0; count_rawId<NUM_OF_ROW; count_rawId++)
 69c:	c1 2f       	mov	r28, r17
 69e:	c3 cf       	rjmp	.-122    	; 0x626 <Keypad_ReadPressedButton+0xc8>
				return result;
			}
		}
	}
	return NO_PRESSED_BUTTON; 
}
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	1f 91       	pop	r17
 6a6:	0f 91       	pop	r16
 6a8:	08 95       	ret

000006aa <LCD_StartOperation>:
}

static void LCD_StartOperation(void)
{
	// clear E pin
	DIO_setPinValue(E,0);	
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	62 e0       	ldi	r22, 0x02	; 2
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
 6b4:	08 95       	ret

000006b6 <LCD_SendCommand>:
	//LCD_sendCommand(CLEAR_SCREEN);
	//_delay_ms(2);
//}

void LCD_SendCommand(uint8_t command)
{
 6b6:	cf 93       	push	r28
 6b8:	c8 2f       	mov	r28, r24
{
	switch(mode)
	{
		case SEND_COMMAND:
				// send command config rs=0   rw=0
				DIO_setPinValue(RS,0);
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
				DIO_setPinValue(RW,0);
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	61 e0       	ldi	r22, 0x01	; 1
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
				DIO_setPinValue(RS,1);
				DIO_setPinValue(RW,1);
				break;
		default: return INVALID_OPERATION_MODE;
	}
	Delay_ms_independent(1);
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	DIO_setPinValue(E,1); // stop operation
 6d4:	41 e0       	ldi	r20, 0x01	; 1
 6d6:	62 e0       	ldi	r22, 0x02	; 2
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	Delay_ms_independent(1);
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
//}

void LCD_SendCommand(uint8_t command)
{
	LCD_SetOperationMode(SEND_COMMAND);
	DIO_SetPortValue(LCD_DATA_BUFFER,command);
 6e4:	6c 2f       	mov	r22, r28
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_SetPortValue>
	Delay_ms_independent(1);
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	LCD_StartOperation(); // start operation
 6f2:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_StartOperation>
	Delay_ms_independent(1);
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>


static void LCD_StopOperation(void)
{
	// set E pin
	DIO_setPinValue(E,1);
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	62 e0       	ldi	r22, 0x02	; 2
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	Delay_ms_independent(1);
	LCD_StartOperation(); // start operation
	Delay_ms_independent(1);
	LCD_StopOperation();
	// shift
	command = (command<<4);
 706:	6c 2f       	mov	r22, r28
 708:	62 95       	swap	r22
 70a:	60 7f       	andi	r22, 0xF0	; 240
	DIO_SetPortValue(LCD_DATA_BUFFER,command);
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_SetPortValue>
	Delay_ms_independent(1);
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	LCD_StartOperation();
 718:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_StartOperation>
	Delay_ms_independent(1);
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
}
 722:	cf 91       	pop	r28
 724:	08 95       	ret

00000726 <LCD_Init>:
	return 1;
}

void LCD_Init(void)
{
	Delay_ms_independent(10);
 726:	8a e0       	ldi	r24, 0x0A	; 10
 728:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	//- set Lcd pins as output
	//---- Control pins
	DIO_setPinDirection(E,OUTPUT);
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	62 e0       	ldi	r22, 0x02	; 2
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	Delay_ms_independent(1);
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	DIO_setPinDirection(RW,OUTPUT);
 73c:	41 e0       	ldi	r20, 0x01	; 1
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	DIO_setPinDirection(RS,OUTPUT);
 746:	41 e0       	ldi	r20, 0x01	; 1
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	Delay_ms_independent(1);
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	//----- Data pins
	DIO_setPinDirection(LCD_D7,OUTPUT);
 756:	41 e0       	ldi	r20, 0x01	; 1
 758:	67 e0       	ldi	r22, 0x07	; 7
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D6,OUTPUT);
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	66 e0       	ldi	r22, 0x06	; 6
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D5,OUTPUT);
 76a:	41 e0       	ldi	r20, 0x01	; 1
 76c:	65 e0       	ldi	r22, 0x05	; 5
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D4,OUTPUT);
 774:	41 e0       	ldi	r20, 0x01	; 1
 776:	64 e0       	ldi	r22, 0x04	; 4
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	0e 94 19 01 	call	0x232	; 0x232 <DIO_setPinDirection>
	//Delay_ms_independent(1);
	////LCD_IsBusy();
	//LCD_SendCommand(CLEAR_SCREEN);
	
	//-  follow init sequence
	LCD_SendCommand(0x02);// 4-bit mode
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
	//LCD_IsBusy();
	Delay_ms_independent(1);
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	LCD_SendCommand(_2LINES_58FORMAT_4BITMODE);
 78a:	88 e2       	ldi	r24, 0x28	; 40
 78c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
	//LCD_IsBusy();
	Delay_ms_independent(1);
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	LCD_SendCommand(DISPLAY_ON_CURSOR_OFF);
 796:	8c e0       	ldi	r24, 0x0C	; 12
 798:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
	Delay_ms_independent(1);
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	LCD_SendCommand(CURSOR_RIGHT);
 7a2:	86 e0       	ldi	r24, 0x06	; 6
 7a4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
	Delay_ms_independent(1);
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	//LCD_IsBusy();
	LCD_SendCommand(CLEAR_SCREEN);
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
 7b4:	08 95       	ret

000007b6 <LCD_DisplayCharacter>:
	Delay_ms_independent(1);
}


void LCD_DisplayCharacter(uint8_t character)
{
 7b6:	cf 93       	push	r28
 7b8:	c8 2f       	mov	r28, r24
				DIO_setPinValue(RS,0);
				DIO_setPinValue(RW,0);
				break;
		case SEND_DATA:
				// send data config  rs=1   rw=0
				DIO_setPinValue(RS,1);
 7ba:	41 e0       	ldi	r20, 0x01	; 1
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
				DIO_setPinValue(RW,0);
 7c4:	40 e0       	ldi	r20, 0x00	; 0
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
				DIO_setPinValue(RS,1);
				DIO_setPinValue(RW,1);
				break;
		default: return INVALID_OPERATION_MODE;
	}
	Delay_ms_independent(1);
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	DIO_setPinValue(E,1); // stop operation
 7d4:	41 e0       	ldi	r20, 0x01	; 1
 7d6:	62 e0       	ldi	r22, 0x02	; 2
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	Delay_ms_independent(1);
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>


void LCD_DisplayCharacter(uint8_t character)
{
	LCD_SetOperationMode(SEND_DATA);
	DIO_SetPortValue(LCD_DATA_BUFFER,character);
 7e4:	6c 2f       	mov	r22, r28
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_SetPortValue>
	Delay_ms_independent(1);
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	LCD_StartOperation();
 7f2:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_StartOperation>
	Delay_ms_independent(1);
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>


static void LCD_StopOperation(void)
{
	// set E pin
	DIO_setPinValue(E,1);
 7fc:	41 e0       	ldi	r20, 0x01	; 1
 7fe:	62 e0       	ldi	r22, 0x02	; 2
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
	DIO_SetPortValue(LCD_DATA_BUFFER,character);
	Delay_ms_independent(1);
	LCD_StartOperation();
	Delay_ms_independent(1);
	LCD_StopOperation();
	Delay_ms_independent(1);
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	DIO_SetPortValue(LCD_DATA_BUFFER,(character<<4));
 80c:	6c 2f       	mov	r22, r28
 80e:	62 95       	swap	r22
 810:	60 7f       	andi	r22, 0xF0	; 240
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_SetPortValue>
	Delay_ms_independent(1);
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
	LCD_StartOperation();
 81e:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_StartOperation>
	Delay_ms_independent(1);
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
}
 828:	cf 91       	pop	r28
 82a:	08 95       	ret

0000082c <LCD_DisplayString>:

void LCD_DisplayString(uint8_t * str, uint8_t writing_speed_ms)
{
 82c:	0f 93       	push	r16
 82e:	1f 93       	push	r17
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
 834:	ec 01       	movw	r28, r24
 836:	06 2f       	mov	r16, r22
	uint8_t i=0;
 838:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i] != 0)
 83a:	0b c0       	rjmp	.+22     	; 0x852 <LCD_DisplayString+0x26>
	{
		LCD_DisplayCharacter(str[i]);
 83c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_DisplayCharacter>
		Delay_ms_independent(writing_speed_ms);
 840:	80 2f       	mov	r24, r16
 842:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_ms_independent>
		i++;
 846:	1f 5f       	subi	r17, 0xFF	; 255
		if (i == 16) // the space of 1st line has been ended
 848:	10 31       	cpi	r17, 0x10	; 16
 84a:	19 f4       	brne	.+6      	; 0x852 <LCD_DisplayString+0x26>
		{
			LCD_SendCommand(CURSOR_AT_LINE2);
 84c:	80 ec       	ldi	r24, 0xC0	; 192
 84e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_SendCommand>
}

void LCD_DisplayString(uint8_t * str, uint8_t writing_speed_ms)
{
	uint8_t i=0;
	while(str[i] != 0)
 852:	fe 01       	movw	r30, r28
 854:	e1 0f       	add	r30, r17
 856:	f1 1d       	adc	r31, r1
 858:	80 81       	ld	r24, Z
 85a:	81 11       	cpse	r24, r1
 85c:	ef cf       	rjmp	.-34     	; 0x83c <LCD_DisplayString+0x10>
		if (i == 16) // the space of 1st line has been ended
		{
			LCD_SendCommand(CURSOR_AT_LINE2);
		}
	}
}
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	08 95       	ret

00000868 <main>:
#include "App.h"


int main(void)
{
	App_init();
 868:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
    while(1)
    {
		App_promptUser((uint8_t*)"Please Guess the Number:");
 86c:	8f e8       	ldi	r24, 0x8F	; 143
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <App_promptUser>
		App_CreateRandNum();
 874:	0e 94 4e 00 	call	0x9c	; 0x9c <App_CreateRandNum>
		App_TakeUserInput();
 878:	0e 94 a9 00 	call	0x152	; 0x152 <App_TakeUserInput>
		App_ValidateInput();
 87c:	0e 94 67 00 	call	0xce	; 0xce <App_ValidateInput>
		App_PrintResult();
 880:	0e 94 cd 00 	call	0x19a	; 0x19a <App_PrintResult>
 884:	f3 cf       	rjmp	.-26     	; 0x86c <main+0x4>

00000886 <__vector_11>:




void __vector_11(void) 
{
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	2f 93       	push	r18
 892:	3f 93       	push	r19
 894:	4f 93       	push	r20
 896:	5f 93       	push	r21
 898:	6f 93       	push	r22
 89a:	7f 93       	push	r23
 89c:	8f 93       	push	r24
 89e:	9f 93       	push	r25
 8a0:	af 93       	push	r26
 8a2:	bf 93       	push	r27
 8a4:	ef 93       	push	r30
 8a6:	ff 93       	push	r31
	if (overflow_callback != 0)
 8a8:	80 91 d4 00 	lds	r24, 0x00D4
 8ac:	90 91 d5 00 	lds	r25, 0x00D5
 8b0:	89 2b       	or	r24, r25
 8b2:	29 f0       	breq	.+10     	; 0x8be <__vector_11+0x38>
	{
		//TCNT0 = 256-145; // set the value again
		overflow_callback();
 8b4:	e0 91 d4 00 	lds	r30, 0x00D4
 8b8:	f0 91 d5 00 	lds	r31, 0x00D5
 8bc:	09 95       	icall
	}
}
 8be:	ff 91       	pop	r31
 8c0:	ef 91       	pop	r30
 8c2:	bf 91       	pop	r27
 8c4:	af 91       	pop	r26
 8c6:	9f 91       	pop	r25
 8c8:	8f 91       	pop	r24
 8ca:	7f 91       	pop	r23
 8cc:	6f 91       	pop	r22
 8ce:	5f 91       	pop	r21
 8d0:	4f 91       	pop	r20
 8d2:	3f 91       	pop	r19
 8d4:	2f 91       	pop	r18
 8d6:	0f 90       	pop	r0
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	0f 90       	pop	r0
 8dc:	1f 90       	pop	r1
 8de:	18 95       	reti

000008e0 <__udivmodsi4>:
 8e0:	a1 e2       	ldi	r26, 0x21	; 33
 8e2:	1a 2e       	mov	r1, r26
 8e4:	aa 1b       	sub	r26, r26
 8e6:	bb 1b       	sub	r27, r27
 8e8:	fd 01       	movw	r30, r26
 8ea:	0d c0       	rjmp	.+26     	; 0x906 <__udivmodsi4_ep>

000008ec <__udivmodsi4_loop>:
 8ec:	aa 1f       	adc	r26, r26
 8ee:	bb 1f       	adc	r27, r27
 8f0:	ee 1f       	adc	r30, r30
 8f2:	ff 1f       	adc	r31, r31
 8f4:	a2 17       	cp	r26, r18
 8f6:	b3 07       	cpc	r27, r19
 8f8:	e4 07       	cpc	r30, r20
 8fa:	f5 07       	cpc	r31, r21
 8fc:	20 f0       	brcs	.+8      	; 0x906 <__udivmodsi4_ep>
 8fe:	a2 1b       	sub	r26, r18
 900:	b3 0b       	sbc	r27, r19
 902:	e4 0b       	sbc	r30, r20
 904:	f5 0b       	sbc	r31, r21

00000906 <__udivmodsi4_ep>:
 906:	66 1f       	adc	r22, r22
 908:	77 1f       	adc	r23, r23
 90a:	88 1f       	adc	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	1a 94       	dec	r1
 910:	69 f7       	brne	.-38     	; 0x8ec <__udivmodsi4_loop>
 912:	60 95       	com	r22
 914:	70 95       	com	r23
 916:	80 95       	com	r24
 918:	90 95       	com	r25
 91a:	9b 01       	movw	r18, r22
 91c:	ac 01       	movw	r20, r24
 91e:	bd 01       	movw	r22, r26
 920:	cf 01       	movw	r24, r30
 922:	08 95       	ret

00000924 <__umulhisi3>:
 924:	a2 9f       	mul	r26, r18
 926:	b0 01       	movw	r22, r0
 928:	b3 9f       	mul	r27, r19
 92a:	c0 01       	movw	r24, r0
 92c:	a3 9f       	mul	r26, r19
 92e:	70 0d       	add	r23, r0
 930:	81 1d       	adc	r24, r1
 932:	11 24       	eor	r1, r1
 934:	91 1d       	adc	r25, r1
 936:	b2 9f       	mul	r27, r18
 938:	70 0d       	add	r23, r0
 93a:	81 1d       	adc	r24, r1
 93c:	11 24       	eor	r1, r1
 93e:	91 1d       	adc	r25, r1
 940:	08 95       	ret

00000942 <do_rand>:
 942:	8f 92       	push	r8
 944:	9f 92       	push	r9
 946:	af 92       	push	r10
 948:	bf 92       	push	r11
 94a:	cf 92       	push	r12
 94c:	df 92       	push	r13
 94e:	ef 92       	push	r14
 950:	ff 92       	push	r15
 952:	cf 93       	push	r28
 954:	df 93       	push	r29
 956:	ec 01       	movw	r28, r24
 958:	68 81       	ld	r22, Y
 95a:	79 81       	ldd	r23, Y+1	; 0x01
 95c:	8a 81       	ldd	r24, Y+2	; 0x02
 95e:	9b 81       	ldd	r25, Y+3	; 0x03
 960:	61 15       	cp	r22, r1
 962:	71 05       	cpc	r23, r1
 964:	81 05       	cpc	r24, r1
 966:	91 05       	cpc	r25, r1
 968:	21 f4       	brne	.+8      	; 0x972 <do_rand+0x30>
 96a:	64 e2       	ldi	r22, 0x24	; 36
 96c:	79 ed       	ldi	r23, 0xD9	; 217
 96e:	8b e5       	ldi	r24, 0x5B	; 91
 970:	97 e0       	ldi	r25, 0x07	; 7
 972:	2d e1       	ldi	r18, 0x1D	; 29
 974:	33 ef       	ldi	r19, 0xF3	; 243
 976:	41 e0       	ldi	r20, 0x01	; 1
 978:	50 e0       	ldi	r21, 0x00	; 0
 97a:	0e 94 25 05 	call	0xa4a	; 0xa4a <__divmodsi4>
 97e:	49 01       	movw	r8, r18
 980:	5a 01       	movw	r10, r20
 982:	9b 01       	movw	r18, r22
 984:	ac 01       	movw	r20, r24
 986:	a7 ea       	ldi	r26, 0xA7	; 167
 988:	b1 e4       	ldi	r27, 0x41	; 65
 98a:	0e 94 44 05 	call	0xa88	; 0xa88 <__muluhisi3>
 98e:	6b 01       	movw	r12, r22
 990:	7c 01       	movw	r14, r24
 992:	ac ee       	ldi	r26, 0xEC	; 236
 994:	b4 ef       	ldi	r27, 0xF4	; 244
 996:	a5 01       	movw	r20, r10
 998:	94 01       	movw	r18, r8
 99a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__mulohisi3>
 99e:	c6 0e       	add	r12, r22
 9a0:	d7 1e       	adc	r13, r23
 9a2:	e8 1e       	adc	r14, r24
 9a4:	f9 1e       	adc	r15, r25
 9a6:	f7 fe       	sbrs	r15, 7
 9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <do_rand+0x74>
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	c8 1a       	sub	r12, r24
 9ae:	d1 08       	sbc	r13, r1
 9b0:	e1 08       	sbc	r14, r1
 9b2:	80 e8       	ldi	r24, 0x80	; 128
 9b4:	f8 0a       	sbc	r15, r24
 9b6:	c8 82       	st	Y, r12
 9b8:	d9 82       	std	Y+1, r13	; 0x01
 9ba:	ea 82       	std	Y+2, r14	; 0x02
 9bc:	fb 82       	std	Y+3, r15	; 0x03
 9be:	c6 01       	movw	r24, r12
 9c0:	9f 77       	andi	r25, 0x7F	; 127
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	ff 90       	pop	r15
 9c8:	ef 90       	pop	r14
 9ca:	df 90       	pop	r13
 9cc:	cf 90       	pop	r12
 9ce:	bf 90       	pop	r11
 9d0:	af 90       	pop	r10
 9d2:	9f 90       	pop	r9
 9d4:	8f 90       	pop	r8
 9d6:	08 95       	ret

000009d8 <rand_r>:
 9d8:	0e 94 a1 04 	call	0x942	; 0x942 <do_rand>
 9dc:	08 95       	ret

000009de <rand>:
 9de:	80 e6       	ldi	r24, 0x60	; 96
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	0e 94 a1 04 	call	0x942	; 0x942 <do_rand>
 9e6:	08 95       	ret

000009e8 <srand>:
 9e8:	a0 e0       	ldi	r26, 0x00	; 0
 9ea:	b0 e0       	ldi	r27, 0x00	; 0
 9ec:	80 93 60 00 	sts	0x0060, r24
 9f0:	90 93 61 00 	sts	0x0061, r25
 9f4:	a0 93 62 00 	sts	0x0062, r26
 9f8:	b0 93 63 00 	sts	0x0063, r27
 9fc:	08 95       	ret

000009fe <atoi>:
 9fe:	fc 01       	movw	r30, r24
 a00:	88 27       	eor	r24, r24
 a02:	99 27       	eor	r25, r25
 a04:	e8 94       	clt
 a06:	21 91       	ld	r18, Z+
 a08:	20 32       	cpi	r18, 0x20	; 32
 a0a:	e9 f3       	breq	.-6      	; 0xa06 <atoi+0x8>
 a0c:	29 30       	cpi	r18, 0x09	; 9
 a0e:	10 f0       	brcs	.+4      	; 0xa14 <atoi+0x16>
 a10:	2e 30       	cpi	r18, 0x0E	; 14
 a12:	c8 f3       	brcs	.-14     	; 0xa06 <atoi+0x8>
 a14:	2b 32       	cpi	r18, 0x2B	; 43
 a16:	41 f0       	breq	.+16     	; 0xa28 <atoi+0x2a>
 a18:	2d 32       	cpi	r18, 0x2D	; 45
 a1a:	39 f4       	brne	.+14     	; 0xa2a <atoi+0x2c>
 a1c:	68 94       	set
 a1e:	04 c0       	rjmp	.+8      	; 0xa28 <atoi+0x2a>
 a20:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__mulhi_const_10>
 a24:	82 0f       	add	r24, r18
 a26:	91 1d       	adc	r25, r1
 a28:	21 91       	ld	r18, Z+
 a2a:	20 53       	subi	r18, 0x30	; 48
 a2c:	2a 30       	cpi	r18, 0x0A	; 10
 a2e:	c0 f3       	brcs	.-16     	; 0xa20 <atoi+0x22>
 a30:	1e f4       	brtc	.+6      	; 0xa38 <atoi+0x3a>
 a32:	90 95       	com	r25
 a34:	81 95       	neg	r24
 a36:	9f 4f       	sbci	r25, 0xFF	; 255
 a38:	08 95       	ret

00000a3a <__mulhi_const_10>:
 a3a:	7a e0       	ldi	r23, 0x0A	; 10
 a3c:	97 9f       	mul	r25, r23
 a3e:	90 2d       	mov	r25, r0
 a40:	87 9f       	mul	r24, r23
 a42:	80 2d       	mov	r24, r0
 a44:	91 0d       	add	r25, r1
 a46:	11 24       	eor	r1, r1
 a48:	08 95       	ret

00000a4a <__divmodsi4>:
 a4a:	05 2e       	mov	r0, r21
 a4c:	97 fb       	bst	r25, 7
 a4e:	1e f4       	brtc	.+6      	; 0xa56 <__divmodsi4+0xc>
 a50:	00 94       	com	r0
 a52:	0e 94 3c 05 	call	0xa78	; 0xa78 <__negsi2>
 a56:	57 fd       	sbrc	r21, 7
 a58:	07 d0       	rcall	.+14     	; 0xa68 <__divmodsi4_neg2>
 a5a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__udivmodsi4>
 a5e:	07 fc       	sbrc	r0, 7
 a60:	03 d0       	rcall	.+6      	; 0xa68 <__divmodsi4_neg2>
 a62:	4e f4       	brtc	.+18     	; 0xa76 <__divmodsi4_exit>
 a64:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__negsi2>

00000a68 <__divmodsi4_neg2>:
 a68:	50 95       	com	r21
 a6a:	40 95       	com	r20
 a6c:	30 95       	com	r19
 a6e:	21 95       	neg	r18
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	4f 4f       	sbci	r20, 0xFF	; 255
 a74:	5f 4f       	sbci	r21, 0xFF	; 255

00000a76 <__divmodsi4_exit>:
 a76:	08 95       	ret

00000a78 <__negsi2>:
 a78:	90 95       	com	r25
 a7a:	80 95       	com	r24
 a7c:	70 95       	com	r23
 a7e:	61 95       	neg	r22
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	08 95       	ret

00000a88 <__muluhisi3>:
 a88:	0e 94 92 04 	call	0x924	; 0x924 <__umulhisi3>
 a8c:	a5 9f       	mul	r26, r21
 a8e:	90 0d       	add	r25, r0
 a90:	b4 9f       	mul	r27, r20
 a92:	90 0d       	add	r25, r0
 a94:	a4 9f       	mul	r26, r20
 a96:	80 0d       	add	r24, r0
 a98:	91 1d       	adc	r25, r1
 a9a:	11 24       	eor	r1, r1
 a9c:	08 95       	ret

00000a9e <__mulshisi3>:
 a9e:	b7 ff       	sbrs	r27, 7
 aa0:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__muluhisi3>

00000aa4 <__mulohisi3>:
 aa4:	0e 94 44 05 	call	0xa88	; 0xa88 <__muluhisi3>
 aa8:	82 1b       	sub	r24, r18
 aaa:	93 0b       	sbc	r25, r19
 aac:	08 95       	ret

00000aae <_exit>:
 aae:	f8 94       	cli

00000ab0 <__stop_program>:
 ab0:	ff cf       	rjmp	.-2      	; 0xab0 <__stop_program>
